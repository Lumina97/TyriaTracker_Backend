import { RawAxiosRequestConfig } from 'axios';
import { z } from 'zod';

interface Endpoint {
    path: `v2/${string}`;
    tokenRequired: boolean;
}

/**
 * Available language options
 */
declare enum ApiLanguage {
    English = "en",
    French = "fr",
    German = "de",
    Spanish = "es",
    Chinese = "zh"
}
/**
 * Parameters passed into the endpoint, to make a specific request
 */
type UrlParams = Record<string, string | number | string[] | number[]>;
/**
 * Parameters required by the Api for any call
 */
interface ApiParams {
    token?: string;
    language?: ApiLanguage;
    rateLimitRetry?: boolean;
}

/**
 * Base Api object. Implements anything needed for the requests to all endpoints
 */
declare class ApiBase {
    private readonly _baseUrl;
    private readonly _apiToken?;
    private readonly _language;
    private readonly _rateLimitRetry;
    private readonly _rateLimitRetryAttempts;
    constructor(apiParams?: ApiParams);
    /**
     * Parameters for the api response, at top level
     */
    protected getParams(): ApiParams;
    /**
     * Generic request builder. Adds a finalized request to the concurrency queue
     *
     * @param endpoint - API Endpoint
     * @param apiParams - Query string
     * @param responseType - Type of the response
     * @param attempts - Previously failed retry count
     */
    protected buildRequest<T extends z.ZodType>(endpoint: Endpoint, apiParams: UrlParams, responseType: T, attempts?: number): Promise<z.infer<T>>;
    /**
     * Retries failed requests
     *
     * @param endpoint - Endpoint to which a request was originally made
     * @param prevOptions - Axios request options
     * @param responseType - Originally requested schema
     * @param apiParams - Query string
     * @param rateLimitAttempt - Current rate-limit retry counter
     * @param prevError - Error that caused a retry
     */
    protected retryRequest<T extends z.ZodType>(endpoint: Endpoint, prevOptions: RawAxiosRequestConfig, responseType: T, apiParams: UrlParams, rateLimitAttempt: number, prevError?: unknown): Promise<T>;
    /**
     * Builds final Api url from the endpoint and provided parameters
     *
     * @param endpoint - Api endpoint
     * @param urlParams - Parameters
     */
    private _getApiUrl;
}

/**
 * /v2/account Api
 */
declare class AccountApi extends ApiBase {
    /**
     * Returns information about player accounts.
     */
    get(): Promise<{
        id: string;
        age: number;
        name: string;
        world: number;
        guilds: string[];
        guild_leader: string[];
        created: string;
        access: string[];
        commander: boolean;
        fractal_level: number;
        daily_ap: number;
        monthly_ap: number;
        wvw_rank: number;
        last_modified?: string | undefined;
        build_storage_slots?: number | undefined;
    }>;
    /**
     * Returns an account's progress towards all their achievements.
     */
    getAchievements(): Promise<{
        id: number;
        current: number;
        done: boolean;
        bits?: number[] | undefined;
        max?: number | undefined;
        repeated?: number | undefined;
        unlocked?: boolean | undefined;
    }[]>;
    /**
     * Returns the items stored in a player's vault (not including material storage).
     * If null, the slot is empty.
     */
    getBank(): Promise<(({
        id: number;
        count: number;
        dyes?: number[] | undefined;
        upgrades?: number[] | undefined;
        stats?: {
            id: number;
            attributes: {
                AgonyResistance?: number | undefined;
                BoonDuration?: number | undefined;
                ConditionDamage?: number | undefined;
                ConditionDuration?: number | undefined;
                CritDamage?: number | undefined;
                Healing?: number | undefined;
                Power?: number | undefined;
                Precision?: number | undefined;
                Toughness?: number | undefined;
                Vitality?: number | undefined;
            };
        } | undefined;
        charges?: number | undefined;
        skin?: number | undefined;
        upgrade_slot_indices?: number[] | undefined;
        infusions?: number[] | undefined;
    } & ({
        binding: "Character";
        bound_to: string;
    } | {
        binding: "Account";
        bound_to?: undefined;
    } | {
        binding?: undefined;
        bound_to?: undefined;
    })) | null)[]>;
    /**
     * Returns the templates stored in a player's build storage.
     */
    getBuildStorage(): Promise<{
        specializations: {
            traits: (number | null)[];
            id: number;
        }[];
        name: string;
        profession: string;
        skills?: {
            heal: number | null;
            utilities: (number | null)[];
            elite: number | null;
        } | undefined;
        legends?: (string | null)[] | undefined;
        aquatic_skills?: {
            heal: number | null;
            utilities: (number | null)[];
            elite: number | null;
        } | undefined;
        aquatic_legends?: (string | null)[] | undefined;
    }[]>;
    /**
     * Returns information about time-gated recipes that have been crafted by the account since daily-reset.
     */
    getDailyCrafts(): Promise<string[]>;
    /**
     * Returns the dungeons completed since daily dungeon reset.
     */
    getDungeons(): Promise<string[]>;
    /**
     * Returns the unlocked dyes of the account.
     */
    getDyes(): Promise<number[]>;
    /**
     * Returns the player's unlocked emotes.
     */
    getEmotes(): Promise<string[]>;
    /**
     * Returns information about finishers that are unlocked for an account.
     */
    getFinishers(): Promise<{
        id: number;
        permanent: boolean;
        quantity?: number | undefined;
    }[]>;
    /**
     * Returns information about gliders that are unlocked for an account.
     */
    getGliders(): Promise<number[]>;
    /**
     * Returns information about unlocked home instance nodes.
     */
    getHomeNodes(): Promise<string[]>;
    /**
     * Returns information about unlocked home instance cats.
     */
    getHomeCats(): Promise<number[]>;
    /**
     * Returns information about unlocked homestead decorations.
     */
    getHomesteadDecorations(): Promise<{
        id: number;
        count: number;
    }[]>;
    /**
     * Returns information about glyphs stored in homestead collection boxes.
     */
    getHomesteadGlyphs(): Promise<string[]>;
    /**
     * Returns the shared inventory slots in an account.
     * If null, the slot is empty
     */
    getInventory(): Promise<({
        id: number;
        count: number;
        upgrades?: number[] | undefined;
        charges?: number | undefined;
        skin?: number | undefined;
        infusions?: number[] | undefined;
        binding?: "Account" | undefined;
    } | null)[]>;
    /**
     * Returns the unlocked Jade Bot skins of the account.
     */
    getJadebots(): Promise<number[]>;
    /**
     * Returns information about the Legendary Armory items that are unlocked for an account.
     */
    getLegendaryArmory(): Promise<{
        id: number;
        count: number;
    }[]>;
    /**
     * Returns the total amount of luck consumed on an account.
     */
    getLuck(): Promise<{
        id: "luck";
        value: number;
    }[]>;
    /**
     * Returns information about mail carriers that are unlocked for an account.
     */
    getMailCarriers(): Promise<number[]>;
    /**
     * Returns information about Hero's Choice Chests acquired by the account since daily-reset.
     */
    getMapChests(): Promise<string[]>;
    /**
     * Returns information about masteries that are unlocked for an account.
     * A tallied up total of the account's mastery points can be found at /v2/account/mastery/points.
     */
    getMasteries(): Promise<{
        id: number;
        level: number;
    }[]>;
    /**
     * Returns information about the total amount of mastery points that are unlocked for an account.
     * A detailed mastery track completion break down is available at /v2/account/masteries.
     */
    getMasteryPoints(): Promise<{
        unlocked: number[];
        totals: {
            region: string;
            spent: number;
            earned: number;
        }[];
    }>;
    /**
     * Returns the materials stored in a player's vault.
     */
    getMaterials(): Promise<{
        id: number;
        count: number;
        category: number;
        binding?: "Account" | undefined;
    }[]>;
    /**
     * Returns the unlocked miniatures of the account.
     */
    getMinis(): Promise<number[]>;
    /**
     * Returns the unlocked mount skins of the account.
     */
    getMountSkins(): Promise<number[]>;
    /**
     * Returns the unlocked mounts of the account.
     */
    getMountTypes(): Promise<string[]>;
    /**
     * Returns information about novelties that are unlocked for an account.
     */
    getNovelties(): Promise<number[]>;
    /**
     * Returns information about outfits that are unlocked for an account.
     */
    getOutfits(): Promise<number[]>;
    /**
     * Returns account-wide progression for Fractals's Account Augmentation and Luck.
     */
    getProgression(): Promise<{
        id: string;
        value: number;
    }[]>;
    /**
     * Returns information about pvp heroes that are unlocked for an account.
     */
    getPvpHeroes(): Promise<number[]>;
    /**
     * Returns the completed raid encounters since weekly raid reset.
     */
    getRaids(): Promise<string[]>;
    /**
     * Returns information about recipes that are unlocked for an account.
     */
    getRecipes(): Promise<number[]>;
    /**
     * Returns the unlocked Skiff skins of the account.
     */
    getSkiffs(): Promise<number[]>;
    /**
     * Returns the unlocked skins of the account.
     */
    getSkins(): Promise<number[]>;
    /**
     * Returns information about titles that are unlocked for an account.
     */
    getTitles(): Promise<number[]>;
    /**
     * Returns the currencies of the account
     */
    getWallet(): Promise<{
        id: number;
        value: number;
    }[]>;
    /**
     * Returns the current set of daily Wizard's Vault achievements for the account.
     */
    getWizardsVaultDaily(): Promise<{
        objectives: {
            id: number;
            title: string;
            track: string;
            acclaim: number;
            progress_current: number;
            progress_complete: number;
            claimed: boolean;
        }[];
        meta_progress_current: number;
        meta_progress_complete: number;
        meta_reward_item_id: number;
        meta_reward_astral: number;
        meta_reward_claimed: boolean;
    }>;
    /**
     * Returns the current set of Wizard's Vault rewards, along with details about which have already been purchased by the account, and in what quantity.
     */
    getWizardsVaultListings(): Promise<{
        id: number;
        type: "Featured" | "Normal" | "Legacy";
        item_id: number;
        item_count: number;
        cost: number;
        purchased?: number | undefined;
        purchase_limit?: number | undefined;
    }[]>;
    /**
     * Returns the current set of special Wizard's Vault achievements for the account.
     */
    getWizardsVaultSpecial(): Promise<{
        objectives: {
            id: number;
            title: string;
            track: string;
            acclaim: number;
            progress_current: number;
            progress_complete: number;
            claimed: boolean;
        }[];
    }>;
    /**
     * Returns the current set of weekly Wizard's Vault achievements for the account.
     */
    getWizardsVaultWeekly(): Promise<{
        objectives: {
            id: number;
            title: string;
            track: string;
            acclaim: number;
            progress_current: number;
            progress_complete: number;
            claimed: boolean;
        }[];
        meta_progress_current: number;
        meta_progress_complete: number;
        meta_reward_item_id: number;
        meta_reward_astral: number;
        meta_reward_claimed: boolean;
    }>;
    /**
     * Returns information about which world bosses have been killed by the account since daily-reset.
     */
    getWorldBosses(): Promise<string[]>;
}

/**
 * /v2/achievements/categories/:ids definition
 */
declare const AchievementCategoriesDTO: z.ZodArray<z.ZodObject<{
    /** Category id.. */
    id: z.ZodNumber;
    /** Category name.. */
    name: z.ZodString;
    /** Category description. */
    description: z.ZodString;
    /** A number describing where to sort this category among other the other
     * categories in its group. Lowest numbers go first, highest numbers go last. */
    order: z.ZodNumber;
    /** A URL to an image for the icon of the category. */
    icon: z.ZodString;
    /** Achievement ids in this category.
     * Can be resolved against /v2/achievements. */
    achievements: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    achievements: number[];
    id: number;
    name: string;
    description: string;
    order: number;
    icon: string;
}, {
    achievements: number[];
    id: number;
    name: string;
    description: string;
    order: number;
    icon: string;
}>, "many">;

/**
 * /v2/achievements/groups definition
 */
declare const AchievementGroupsDTO: z.ZodObject<{
    /** The group's GUID. */
    id: z.ZodString;
    /** The group's name. */
    name: z.ZodString;
    /** The group's description. */
    description: z.ZodString;
    /**
     * A number describing where to sort this group among other groups.
     * Lowest numbers go first, highest numbers go last. */
    order: z.ZodNumber;
    /**
     * An array containing a number of category IDs that this group contains.
     * Can be resolved against /v2/achievements/categories. */
    categories: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    categories: number[];
    id: string;
    name: string;
    description: string;
    order: number;
}, {
    categories: number[];
    id: string;
    name: string;
    description: string;
    order: number;
}>;

/**
 * /v2/backstory/answers definition
 */
declare const BackstoryAnswersDTO: z.ZodArray<z.ZodObject<{
    /** The id of the answer. */
    id: z.ZodString;
    /** The title (or name) of the answer. */
    title: z.ZodString;
    /** The description of the answer; as displayed in-game when presented as an answer choice
     * to a question during the Biography portion of character creation. */
    description: z.ZodString;
    /** The Story Journal entry for the answer; as displayed in-game. */
    journal: z.ZodString;
    /** The id of the Biography question that this answers; Can be resolved against v2/backstory/questions. */
    question: z.ZodNumber;
    /** When present, an array of professions that this answer is available as a choice for. */
    professions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** When present, an array of races that this answer is available as a choice for. */
    races: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    title: string;
    description: string;
    journal: string;
    question: number;
    professions?: string[] | undefined;
    races?: string[] | undefined;
}, {
    id: string;
    title: string;
    description: string;
    journal: string;
    question: number;
    professions?: string[] | undefined;
    races?: string[] | undefined;
}>, "many">;

/**
 * /v2/backstory/questions definition
 */
declare const BackstoryQuestionsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the question. */
    id: z.ZodNumber;
    /** The title (or name) of the question. */
    title: z.ZodString;
    /** The description of the question; as displayed in-game when presented as a Biography choice during character creation. */
    description: z.ZodString;
    /** The order in which this question is displayed in-game while answering your characters' Biography questions during character creation. */
    order: z.ZodNumber;
    /** The list of answers for this question; Can be resolved against v2/backstory/answers. */
    answers: z.ZodArray<z.ZodString, "many">;
    /** When present, an array of races that this question is presented to. */
    races: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** When present, an array of professions that this question is presented to. */
    professions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: number;
    title: string;
    description: string;
    order: number;
    answers: string[];
    professions?: string[] | undefined;
    races?: string[] | undefined;
}, {
    id: number;
    title: string;
    description: string;
    order: number;
    answers: string[];
    professions?: string[] | undefined;
    races?: string[] | undefined;
}>, "many">;

declare const ContinentsMapsDTO: z.ZodArray<z.ZodObject<{
    /** The map name. */
    name: z.ZodString;
    /** The minimum level of the map. */
    min_level: z.ZodNumber;
    /** The maximum level of the map. */
    max_level: z.ZodNumber;
    /** The default floor of the map. */
    default_floor: z.ZodNumber;
    /** The coordinates of the map label. */
    label_coord: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    /** The dimensions of the map, given as the coordinates of the lower-left (SW) and upper-right (NE) corners. */
    map_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
    /**
     * The dimensions of the map within the continent coordinate system,
     * given as top-left (NW) and bottom-right (SE) corner coordinates.
     */
    continent_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
    /** A list of points of interest (landmarks, waypoints, vistas, etc). */
    points_of_interest: z.ZodRecord<z.ZodString, z.ZodObject<{
        /** The point of interest id. */
        id: z.ZodNumber;
        /** The name of the point of interest. */
        name: z.ZodOptional<z.ZodString>;
        /** Type of the point of interest. */
        type: z.ZodString;
        /** The floor of this object. */
        floor: z.ZodNumber;
        /** The coordinates of this object. */
        coord: z.ZodArray<z.ZodNumber, "many">;
        /** The point of interest chat link. */
        chat_link: z.ZodString;
        /** PoI icon. Only available for unlock types */
        icon: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        type: string;
        floor: number;
        coord: number[];
        chat_link: string;
        name?: string | undefined;
        icon?: string | undefined;
    }, {
        id: number;
        type: string;
        floor: number;
        coord: number[];
        chat_link: string;
        name?: string | undefined;
        icon?: string | undefined;
    }>>;
    /** A list of renown hearts. */
    tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
        /** The renown heart id. */
        id: z.ZodNumber;
        /** The objective or name of the heart. */
        objective: z.ZodString;
        /** The level of the heart. */
        level: z.ZodNumber;
        /** The coordinates where it takes place. */
        coord: z.ZodArray<z.ZodNumber, "many">;
        /** A list of coordinates marking the boundary of the heart. */
        bounds: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        /** The renown heart chat link. */
        chat_link: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        objective: string;
        bounds: number[][];
    }, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        objective: string;
        bounds: number[][];
    }>>;
    /** A list of skill challenges. */
    skill_challenges: z.ZodArray<z.ZodObject<{
        /**
         * The hero challenge id, formed of two numbers separated by a dash.
         * The first number represents the expansion (0 for Core Tyria, 1 for Heart of Thorns and 2 for Path of Fire),
         * and therefore could be used to change the hero challenge map marker icon.
         * If the first number and dash prefix is removed from the string,
         * the second number is no longer unique among other hero challenges.
         */
        id: z.ZodOptional<z.ZodString>;
        /** The coordinates of this hero challenge. */
        coord: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        coord: number[];
        id?: string | undefined;
    }, {
        coord: number[];
        id?: string | undefined;
    }>, "many">;
    /** A list of areas within the map. */
    sectors: z.ZodRecord<z.ZodString, z.ZodObject<{
        /** The area id. */
        id: z.ZodNumber;
        /** The name of the area. */
        name: z.ZodOptional<z.ZodString>;
        /** The level of the area. */
        level: z.ZodNumber;
        /** The coordinates of this area (this is usually the center position). */
        coord: z.ZodArray<z.ZodNumber, "many">;
        /** A list of coordinates marking the boundary of the area. */
        bounds: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        /** The area chat link. */
        chat_link: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        bounds: number[][];
        name?: string | undefined;
    }, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        bounds: number[][];
        name?: string | undefined;
    }>>;
    /** A list of adventures within the map. */
    adventures: z.ZodArray<z.ZodObject<{
        /** The adventure guid (token length 8-4-4-4-12 with a dash between each group of digits). */
        id: z.ZodString;
        /** The coordinates of the start of the adventure. */
        coord: z.ZodArray<z.ZodNumber, "many">;
        /** The name of the adventure. */
        name: z.ZodString;
        /** The description of the adventure. */
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        description: string;
        coord: number[];
    }, {
        id: string;
        name: string;
        description: string;
        coord: number[];
    }>, "many">;
    /** A list of mastery insights within the map. */
    mastery_points: z.ZodArray<z.ZodObject<{
        /** The mastery insight id. */
        id: z.ZodNumber;
        /** The region of the mastery insight, which determines its color. */
        region: z.ZodString;
        /** The coordinates of the mastery insight. */
        coord: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        region: string;
        coord: number[];
    }, {
        id: number;
        region: string;
        coord: number[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    min_level: number;
    max_level: number;
    default_floor: number;
    map_rect: number[][];
    continent_rect: number[][];
    points_of_interest: Record<string, {
        id: number;
        type: string;
        floor: number;
        coord: number[];
        chat_link: string;
        name?: string | undefined;
        icon?: string | undefined;
    }>;
    tasks: Record<string, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        objective: string;
        bounds: number[][];
    }>;
    skill_challenges: {
        coord: number[];
        id?: string | undefined;
    }[];
    sectors: Record<string, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        bounds: number[][];
        name?: string | undefined;
    }>;
    adventures: {
        id: string;
        name: string;
        description: string;
        coord: number[];
    }[];
    mastery_points: {
        id: number;
        region: string;
        coord: number[];
    }[];
    label_coord?: number[] | undefined;
}, {
    name: string;
    min_level: number;
    max_level: number;
    default_floor: number;
    map_rect: number[][];
    continent_rect: number[][];
    points_of_interest: Record<string, {
        id: number;
        type: string;
        floor: number;
        coord: number[];
        chat_link: string;
        name?: string | undefined;
        icon?: string | undefined;
    }>;
    tasks: Record<string, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        objective: string;
        bounds: number[][];
    }>;
    skill_challenges: {
        coord: number[];
        id?: string | undefined;
    }[];
    sectors: Record<string, {
        id: number;
        level: number;
        coord: number[];
        chat_link: string;
        bounds: number[][];
        name?: string | undefined;
    }>;
    adventures: {
        id: string;
        name: string;
        description: string;
        coord: number[];
    }[];
    mastery_points: {
        id: number;
        region: string;
        coord: number[];
    }[];
    label_coord?: number[] | undefined;
}>, "many">;
declare const ContinentsRegionsDTO: z.ZodArray<z.ZodObject<{
    /** Id of the region. */
    id: z.ZodNumber;
    /** Name of the region. */
    name: z.ZodString;
    /** The coordinates of the region label. */
    label_coord: z.ZodArray<z.ZodNumber, "many">;
    /** The dimensions of the continent, expressed as top-left (NW) and bottom-right (SE) corner coordinates. */
    continent_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
    /** A mapping from the map id to an object. */
    maps: z.ZodRecord<z.ZodString, z.ZodObject<{
        /** The map name. */
        name: z.ZodString;
        /** The minimum level of the map. */
        min_level: z.ZodNumber;
        /** The maximum level of the map. */
        max_level: z.ZodNumber;
        /** The default floor of the map. */
        default_floor: z.ZodNumber;
        /** The coordinates of the map label. */
        label_coord: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        /** The dimensions of the map, given as the coordinates of the lower-left (SW) and upper-right (NE) corners. */
        map_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        /**
         * The dimensions of the map within the continent coordinate system,
         * given as top-left (NW) and bottom-right (SE) corner coordinates.
         */
        continent_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        /** A list of points of interest (landmarks, waypoints, vistas, etc). */
        points_of_interest: z.ZodRecord<z.ZodString, z.ZodObject<{
            /** The point of interest id. */
            id: z.ZodNumber;
            /** The name of the point of interest. */
            name: z.ZodOptional<z.ZodString>;
            /** Type of the point of interest. */
            type: z.ZodString;
            /** The floor of this object. */
            floor: z.ZodNumber;
            /** The coordinates of this object. */
            coord: z.ZodArray<z.ZodNumber, "many">;
            /** The point of interest chat link. */
            chat_link: z.ZodString;
            /** PoI icon. Only available for unlock types */
            icon: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            type: string;
            floor: number;
            coord: number[];
            chat_link: string;
            name?: string | undefined;
            icon?: string | undefined;
        }, {
            id: number;
            type: string;
            floor: number;
            coord: number[];
            chat_link: string;
            name?: string | undefined;
            icon?: string | undefined;
        }>>;
        /** A list of renown hearts. */
        tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
            /** The renown heart id. */
            id: z.ZodNumber;
            /** The objective or name of the heart. */
            objective: z.ZodString;
            /** The level of the heart. */
            level: z.ZodNumber;
            /** The coordinates where it takes place. */
            coord: z.ZodArray<z.ZodNumber, "many">;
            /** A list of coordinates marking the boundary of the heart. */
            bounds: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            /** The renown heart chat link. */
            chat_link: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            objective: string;
            bounds: number[][];
        }, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            objective: string;
            bounds: number[][];
        }>>;
        /** A list of skill challenges. */
        skill_challenges: z.ZodArray<z.ZodObject<{
            /**
             * The hero challenge id, formed of two numbers separated by a dash.
             * The first number represents the expansion (0 for Core Tyria, 1 for Heart of Thorns and 2 for Path of Fire),
             * and therefore could be used to change the hero challenge map marker icon.
             * If the first number and dash prefix is removed from the string,
             * the second number is no longer unique among other hero challenges.
             */
            id: z.ZodOptional<z.ZodString>;
            /** The coordinates of this hero challenge. */
            coord: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            coord: number[];
            id?: string | undefined;
        }, {
            coord: number[];
            id?: string | undefined;
        }>, "many">;
        /** A list of areas within the map. */
        sectors: z.ZodRecord<z.ZodString, z.ZodObject<{
            /** The area id. */
            id: z.ZodNumber;
            /** The name of the area. */
            name: z.ZodOptional<z.ZodString>;
            /** The level of the area. */
            level: z.ZodNumber;
            /** The coordinates of this area (this is usually the center position). */
            coord: z.ZodArray<z.ZodNumber, "many">;
            /** A list of coordinates marking the boundary of the area. */
            bounds: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            /** The area chat link. */
            chat_link: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            bounds: number[][];
            name?: string | undefined;
        }, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            bounds: number[][];
            name?: string | undefined;
        }>>;
        /** A list of adventures within the map. */
        adventures: z.ZodArray<z.ZodObject<{
            /** The adventure guid (token length 8-4-4-4-12 with a dash between each group of digits). */
            id: z.ZodString;
            /** The coordinates of the start of the adventure. */
            coord: z.ZodArray<z.ZodNumber, "many">;
            /** The name of the adventure. */
            name: z.ZodString;
            /** The description of the adventure. */
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            coord: number[];
        }, {
            id: string;
            name: string;
            description: string;
            coord: number[];
        }>, "many">;
        /** A list of mastery insights within the map. */
        mastery_points: z.ZodArray<z.ZodObject<{
            /** The mastery insight id. */
            id: z.ZodNumber;
            /** The region of the mastery insight, which determines its color. */
            region: z.ZodString;
            /** The coordinates of the mastery insight. */
            coord: z.ZodArray<z.ZodNumber, "many">;
        }, "strip", z.ZodTypeAny, {
            id: number;
            region: string;
            coord: number[];
        }, {
            id: number;
            region: string;
            coord: number[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        min_level: number;
        max_level: number;
        default_floor: number;
        map_rect: number[][];
        continent_rect: number[][];
        points_of_interest: Record<string, {
            id: number;
            type: string;
            floor: number;
            coord: number[];
            chat_link: string;
            name?: string | undefined;
            icon?: string | undefined;
        }>;
        tasks: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            objective: string;
            bounds: number[][];
        }>;
        skill_challenges: {
            coord: number[];
            id?: string | undefined;
        }[];
        sectors: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            bounds: number[][];
            name?: string | undefined;
        }>;
        adventures: {
            id: string;
            name: string;
            description: string;
            coord: number[];
        }[];
        mastery_points: {
            id: number;
            region: string;
            coord: number[];
        }[];
        label_coord?: number[] | undefined;
    }, {
        name: string;
        min_level: number;
        max_level: number;
        default_floor: number;
        map_rect: number[][];
        continent_rect: number[][];
        points_of_interest: Record<string, {
            id: number;
            type: string;
            floor: number;
            coord: number[];
            chat_link: string;
            name?: string | undefined;
            icon?: string | undefined;
        }>;
        tasks: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            objective: string;
            bounds: number[][];
        }>;
        skill_challenges: {
            coord: number[];
            id?: string | undefined;
        }[];
        sectors: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            bounds: number[][];
            name?: string | undefined;
        }>;
        adventures: {
            id: string;
            name: string;
            description: string;
            coord: number[];
        }[];
        mastery_points: {
            id: number;
            region: string;
            coord: number[];
        }[];
        label_coord?: number[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    maps: Record<string, {
        name: string;
        min_level: number;
        max_level: number;
        default_floor: number;
        map_rect: number[][];
        continent_rect: number[][];
        points_of_interest: Record<string, {
            id: number;
            type: string;
            floor: number;
            coord: number[];
            chat_link: string;
            name?: string | undefined;
            icon?: string | undefined;
        }>;
        tasks: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            objective: string;
            bounds: number[][];
        }>;
        skill_challenges: {
            coord: number[];
            id?: string | undefined;
        }[];
        sectors: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            bounds: number[][];
            name?: string | undefined;
        }>;
        adventures: {
            id: string;
            name: string;
            description: string;
            coord: number[];
        }[];
        mastery_points: {
            id: number;
            region: string;
            coord: number[];
        }[];
        label_coord?: number[] | undefined;
    }>;
    id: number;
    name: string;
    label_coord: number[];
    continent_rect: number[][];
}, {
    maps: Record<string, {
        name: string;
        min_level: number;
        max_level: number;
        default_floor: number;
        map_rect: number[][];
        continent_rect: number[][];
        points_of_interest: Record<string, {
            id: number;
            type: string;
            floor: number;
            coord: number[];
            chat_link: string;
            name?: string | undefined;
            icon?: string | undefined;
        }>;
        tasks: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            objective: string;
            bounds: number[][];
        }>;
        skill_challenges: {
            coord: number[];
            id?: string | undefined;
        }[];
        sectors: Record<string, {
            id: number;
            level: number;
            coord: number[];
            chat_link: string;
            bounds: number[][];
            name?: string | undefined;
        }>;
        adventures: {
            id: string;
            name: string;
            description: string;
            coord: number[];
        }[];
        mastery_points: {
            id: number;
            region: string;
            coord: number[];
        }[];
        label_coord?: number[] | undefined;
    }>;
    id: number;
    name: string;
    label_coord: number[];
    continent_rect: number[][];
}>, "many">;
declare const ContinentsFloorsDTO: z.ZodArray<z.ZodObject<{
    /** Floor id. */
    id: z.ZodNumber;
    /** Dimensions of the region texture. */
    texture_dims: z.ZodArray<z.ZodNumber, "many">;
    /**
     * If present, represents a rectangle of textures.
     * Each tile coordinate outside this rectangle is not available on the server.
     */
    clamped_view: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">>;
    /** Mapping from the region id to an object. */
    regions: z.ZodRecord<z.ZodString, z.ZodObject<{
        /** Id of the region. */
        id: z.ZodNumber;
        /** Name of the region. */
        name: z.ZodString;
        /** The coordinates of the region label. */
        label_coord: z.ZodArray<z.ZodNumber, "many">;
        /** The dimensions of the continent, expressed as top-left (NW) and bottom-right (SE) corner coordinates. */
        continent_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        /** A mapping from the map id to an object. */
        maps: z.ZodRecord<z.ZodString, z.ZodObject<{
            /** The map name. */
            name: z.ZodString;
            /** The minimum level of the map. */
            min_level: z.ZodNumber;
            /** The maximum level of the map. */
            max_level: z.ZodNumber;
            /** The default floor of the map. */
            default_floor: z.ZodNumber;
            /** The coordinates of the map label. */
            label_coord: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            /** The dimensions of the map, given as the coordinates of the lower-left (SW) and upper-right (NE) corners. */
            map_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            /**
             * The dimensions of the map within the continent coordinate system,
             * given as top-left (NW) and bottom-right (SE) corner coordinates.
             */
            continent_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            /** A list of points of interest (landmarks, waypoints, vistas, etc). */
            points_of_interest: z.ZodRecord<z.ZodString, z.ZodObject<{
                /** The point of interest id. */
                id: z.ZodNumber;
                /** The name of the point of interest. */
                name: z.ZodOptional<z.ZodString>;
                /** Type of the point of interest. */
                type: z.ZodString;
                /** The floor of this object. */
                floor: z.ZodNumber;
                /** The coordinates of this object. */
                coord: z.ZodArray<z.ZodNumber, "many">;
                /** The point of interest chat link. */
                chat_link: z.ZodString;
                /** PoI icon. Only available for unlock types */
                icon: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>>;
            /** A list of renown hearts. */
            tasks: z.ZodRecord<z.ZodString, z.ZodObject<{
                /** The renown heart id. */
                id: z.ZodNumber;
                /** The objective or name of the heart. */
                objective: z.ZodString;
                /** The level of the heart. */
                level: z.ZodNumber;
                /** The coordinates where it takes place. */
                coord: z.ZodArray<z.ZodNumber, "many">;
                /** A list of coordinates marking the boundary of the heart. */
                bounds: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                /** The renown heart chat link. */
                chat_link: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>>;
            /** A list of skill challenges. */
            skill_challenges: z.ZodArray<z.ZodObject<{
                /**
                 * The hero challenge id, formed of two numbers separated by a dash.
                 * The first number represents the expansion (0 for Core Tyria, 1 for Heart of Thorns and 2 for Path of Fire),
                 * and therefore could be used to change the hero challenge map marker icon.
                 * If the first number and dash prefix is removed from the string,
                 * the second number is no longer unique among other hero challenges.
                 */
                id: z.ZodOptional<z.ZodString>;
                /** The coordinates of this hero challenge. */
                coord: z.ZodArray<z.ZodNumber, "many">;
            }, "strip", z.ZodTypeAny, {
                coord: number[];
                id?: string | undefined;
            }, {
                coord: number[];
                id?: string | undefined;
            }>, "many">;
            /** A list of areas within the map. */
            sectors: z.ZodRecord<z.ZodString, z.ZodObject<{
                /** The area id. */
                id: z.ZodNumber;
                /** The name of the area. */
                name: z.ZodOptional<z.ZodString>;
                /** The level of the area. */
                level: z.ZodNumber;
                /** The coordinates of this area (this is usually the center position). */
                coord: z.ZodArray<z.ZodNumber, "many">;
                /** A list of coordinates marking the boundary of the area. */
                bounds: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                /** The area chat link. */
                chat_link: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>>;
            /** A list of adventures within the map. */
            adventures: z.ZodArray<z.ZodObject<{
                /** The adventure guid (token length 8-4-4-4-12 with a dash between each group of digits). */
                id: z.ZodString;
                /** The coordinates of the start of the adventure. */
                coord: z.ZodArray<z.ZodNumber, "many">;
                /** The name of the adventure. */
                name: z.ZodString;
                /** The description of the adventure. */
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }, {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }>, "many">;
            /** A list of mastery insights within the map. */
            mastery_points: z.ZodArray<z.ZodObject<{
                /** The mastery insight id. */
                id: z.ZodNumber;
                /** The region of the mastery insight, which determines its color. */
                region: z.ZodString;
                /** The coordinates of the mastery insight. */
                coord: z.ZodArray<z.ZodNumber, "many">;
            }, "strip", z.ZodTypeAny, {
                id: number;
                region: string;
                coord: number[];
            }, {
                id: number;
                region: string;
                coord: number[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            min_level: number;
            max_level: number;
            default_floor: number;
            map_rect: number[][];
            continent_rect: number[][];
            points_of_interest: Record<string, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>;
            tasks: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>;
            skill_challenges: {
                coord: number[];
                id?: string | undefined;
            }[];
            sectors: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>;
            adventures: {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }[];
            mastery_points: {
                id: number;
                region: string;
                coord: number[];
            }[];
            label_coord?: number[] | undefined;
        }, {
            name: string;
            min_level: number;
            max_level: number;
            default_floor: number;
            map_rect: number[][];
            continent_rect: number[][];
            points_of_interest: Record<string, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>;
            tasks: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>;
            skill_challenges: {
                coord: number[];
                id?: string | undefined;
            }[];
            sectors: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>;
            adventures: {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }[];
            mastery_points: {
                id: number;
                region: string;
                coord: number[];
            }[];
            label_coord?: number[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        maps: Record<string, {
            name: string;
            min_level: number;
            max_level: number;
            default_floor: number;
            map_rect: number[][];
            continent_rect: number[][];
            points_of_interest: Record<string, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>;
            tasks: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>;
            skill_challenges: {
                coord: number[];
                id?: string | undefined;
            }[];
            sectors: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>;
            adventures: {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }[];
            mastery_points: {
                id: number;
                region: string;
                coord: number[];
            }[];
            label_coord?: number[] | undefined;
        }>;
        id: number;
        name: string;
        label_coord: number[];
        continent_rect: number[][];
    }, {
        maps: Record<string, {
            name: string;
            min_level: number;
            max_level: number;
            default_floor: number;
            map_rect: number[][];
            continent_rect: number[][];
            points_of_interest: Record<string, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>;
            tasks: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>;
            skill_challenges: {
                coord: number[];
                id?: string | undefined;
            }[];
            sectors: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>;
            adventures: {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }[];
            mastery_points: {
                id: number;
                region: string;
                coord: number[];
            }[];
            label_coord?: number[] | undefined;
        }>;
        id: number;
        name: string;
        label_coord: number[];
        continent_rect: number[][];
    }>>;
}, "strip", z.ZodTypeAny, {
    regions: Record<string, {
        maps: Record<string, {
            name: string;
            min_level: number;
            max_level: number;
            default_floor: number;
            map_rect: number[][];
            continent_rect: number[][];
            points_of_interest: Record<string, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>;
            tasks: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>;
            skill_challenges: {
                coord: number[];
                id?: string | undefined;
            }[];
            sectors: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>;
            adventures: {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }[];
            mastery_points: {
                id: number;
                region: string;
                coord: number[];
            }[];
            label_coord?: number[] | undefined;
        }>;
        id: number;
        name: string;
        label_coord: number[];
        continent_rect: number[][];
    }>;
    id: number;
    texture_dims: number[];
    clamped_view?: number[][] | undefined;
}, {
    regions: Record<string, {
        maps: Record<string, {
            name: string;
            min_level: number;
            max_level: number;
            default_floor: number;
            map_rect: number[][];
            continent_rect: number[][];
            points_of_interest: Record<string, {
                id: number;
                type: string;
                floor: number;
                coord: number[];
                chat_link: string;
                name?: string | undefined;
                icon?: string | undefined;
            }>;
            tasks: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                objective: string;
                bounds: number[][];
            }>;
            skill_challenges: {
                coord: number[];
                id?: string | undefined;
            }[];
            sectors: Record<string, {
                id: number;
                level: number;
                coord: number[];
                chat_link: string;
                bounds: number[][];
                name?: string | undefined;
            }>;
            adventures: {
                id: string;
                name: string;
                description: string;
                coord: number[];
            }[];
            mastery_points: {
                id: number;
                region: string;
                coord: number[];
            }[];
            label_coord?: number[] | undefined;
        }>;
        id: number;
        name: string;
        label_coord: number[];
        continent_rect: number[][];
    }>;
    id: number;
    texture_dims: number[];
    clamped_view?: number[][] | undefined;
}>, "many">;
declare const ContinentsDTO: z.ZodArray<z.ZodObject<{
    /** Continent id. */
    id: z.ZodNumber;
    /** Continent name. */
    name: z.ZodString;
    /** Width and height dimensions of the continent. */
    continents_dims: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    /** Minimal zoom level for use with this map tile. */
    min_zoom: z.ZodNumber;
    /** Maximum zoom level for use with this map tile. */
    max_zoom: z.ZodNumber;
    /** List of floor ids available for this continent. */
    floors: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    floors: number[];
    id: number;
    name: string;
    min_zoom: number;
    max_zoom: number;
    continents_dims?: number[] | undefined;
}, {
    floors: number[];
    id: number;
    name: string;
    min_zoom: number;
    max_zoom: number;
    continents_dims?: number[] | undefined;
}>, "many">;

/**
 * /v2/homestead/decorations definition
 */
declare const HomesteadDecorationsDTO: z.ZodArray<z.ZodObject<{
    /** The decoration id. */
    id: z.ZodNumber;
    name: z.ZodString;
    /** The homestead decoration description. */
    description: z.ZodString;
    /** The maximum amount of storable instances of this decoration. */
    max_count: z.ZodNumber;
    /** A URL pointing to an icon for the decoration. */
    icon: z.ZodString;
    /** An array of decoration category ids which this decoration belongs to.
     * Can be compared to the v2/homestead/decorations/categories endpoint */
    categories: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    categories: number[];
    id: number;
    name: string;
    description: string;
    icon: string;
    max_count: number;
}, {
    categories: number[];
    id: number;
    name: string;
    description: string;
    icon: string;
    max_count: number;
}>, "many">;

/**
 * /v2/homestead/decorations/categories definition
 */
declare const HomesteadDecorationsCategoriesDTO: z.ZodArray<z.ZodObject<{
    /** The category's ID. */
    id: z.ZodNumber;
    /** The category name. */
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
}, {
    id: number;
    name: string;
}>, "many">;

/**
 * /v2/homestead/glyphs definition
 */
declare const HomesteadGlyphsDTO: z.ZodArray<z.ZodObject<{
    /** The homestead glyph id. */
    id: z.ZodString;
    /** The id of the glyph item.
     * Can be compared to the /v2/items endpoint. */
    item_id: z.ZodNumber;
    /** The slot it is attached to. */
    slot: z.ZodEnum<["harvesting", "mining", "logging"]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    item_id: number;
    slot: "harvesting" | "mining" | "logging";
}, {
    id: string;
    item_id: number;
    slot: "harvesting" | "mining" | "logging";
}>, "many">;

/**
 * /v2/colors definition
 */
declare const ColorsDTO: z.ZodArray<z.ZodObject<{
    /** The color id. */
    id: z.ZodNumber;
    /** The color name. */
    name: z.ZodString;
    /** The base RGB values. */
    base_rgb: z.ZodArray<z.ZodNumber, "many">;
    /** Detailed information on its appearance when applied on cloth armor. */
    cloth: z.ZodObject<{
        /** Color brightness. */
        brightness: z.ZodNumber;
        /** Color contrast. */
        contrast: z.ZodNumber;
        /** Color hue. */
        hue: z.ZodNumber;
        /** Color saturation. */
        saturation: z.ZodNumber;
        /** Color lightness. */
        lightness: z.ZodNumber;
        /** Color RGB values. */
        rgb: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }>;
    /** Detailed information on its appearance when applied on leather armor. */
    leather: z.ZodObject<{
        /** Color brightness. */
        brightness: z.ZodNumber;
        /** Color contrast. */
        contrast: z.ZodNumber;
        /** Color hue. */
        hue: z.ZodNumber;
        /** Color saturation. */
        saturation: z.ZodNumber;
        /** Color lightness. */
        lightness: z.ZodNumber;
        /** Color RGB values. */
        rgb: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }>;
    /** Detailed information on its appearance when applied on metal armor. */
    metal: z.ZodObject<{
        /** Color brightness. */
        brightness: z.ZodNumber;
        /** Color contrast. */
        contrast: z.ZodNumber;
        /** Color hue. */
        hue: z.ZodNumber;
        /** Color saturation. */
        saturation: z.ZodNumber;
        /** Color lightness. */
        lightness: z.ZodNumber;
        /** Color RGB values. */
        rgb: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }>;
    /** Detailed information on its appearance when applied on fur armor. */
    fur: z.ZodOptional<z.ZodObject<{
        /** Color brightness. */
        brightness: z.ZodNumber;
        /** Color contrast. */
        contrast: z.ZodNumber;
        /** Color hue. */
        hue: z.ZodNumber;
        /** Color saturation. */
        saturation: z.ZodNumber;
        /** Color lightness. */
        lightness: z.ZodNumber;
        /** Color RGB values. */
        rgb: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }, {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    }>>;
    /** ID of the dye item. */
    item: z.ZodOptional<z.ZodNumber>;
    /** Color categories. */
    categories: z.ZodUnion<[z.ZodTuple<[z.ZodEnum<["Gray", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Purple"]>, z.ZodEnum<["Vibrant", "Leather", "Metal"]>, z.ZodEnum<["Starter", "Common", "Uncommon", "Rare", "Exclusive"]>], null>, z.ZodArray<z.ZodUndefined, "many">]>;
}, "strip", z.ZodTypeAny, {
    categories: ["Gray" | "Brown" | "Red" | "Orange" | "Yellow" | "Green" | "Blue" | "Purple", "Vibrant" | "Leather" | "Metal", "Starter" | "Common" | "Uncommon" | "Rare" | "Exclusive"] | undefined[];
    id: number;
    name: string;
    base_rgb: number[];
    cloth: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    };
    leather: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    };
    metal: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    };
    fur?: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    } | undefined;
    item?: number | undefined;
}, {
    categories: ["Gray" | "Brown" | "Red" | "Orange" | "Yellow" | "Green" | "Blue" | "Purple", "Vibrant" | "Leather" | "Metal", "Starter" | "Common" | "Uncommon" | "Rare" | "Exclusive"] | undefined[];
    id: number;
    name: string;
    base_rgb: number[];
    cloth: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    };
    leather: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    };
    metal: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    };
    fur?: {
        brightness: number;
        contrast: number;
        hue: number;
        saturation: number;
        lightness: number;
        rgb: number[];
    } | undefined;
    item?: number | undefined;
}>, "many">;

/**
 * /v2/emotes definition
 */
declare const EmotesDTO: z.ZodArray<z.ZodObject<{
    /** Id of the emote. */
    id: z.ZodString;
    /** List of all available commands for the emote. */
    commands: z.ZodArray<z.ZodString, "many">;
    /** List of ids of the items. Can be resolved against /v2/items. */
    unlock_items: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    commands: string[];
    unlock_items: number[];
}, {
    id: string;
    commands: string[];
    unlock_items: number[];
}>, "many">;

/**
 * /v2/currencies definition.
 */
declare const CurrenciesDTO: z.ZodArray<z.ZodObject<{
    /** Currency id. */
    id: z.ZodNumber;
    /** Currency name. */
    name: z.ZodString;
    /** Currency description. */
    description: z.ZodString;
    /** Order of the currency in the list. */
    order: z.ZodNumber;
    /** Currency icon url. */
    icon: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    description: string;
    order: number;
    icon: string;
}, {
    id: number;
    name: string;
    description: string;
    order: number;
    icon: string;
}>, "many">;

/**
 * /v2/dungeons definition
 */
declare const DungeonsDTO: z.ZodArray<z.ZodObject<{
    /** The name of the dungeon.*/
    id: z.ZodString;
    /** The paths in the dungeon. */
    paths: z.ZodArray<z.ZodObject<{
        /** The given name for the dungeon path. */
        id: z.ZodString;
        /** The type of the chosen path. */
        type: z.ZodEnum<["Story", "Explorable"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "Story" | "Explorable";
    }, {
        id: string;
        type: "Story" | "Explorable";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    paths: {
        id: string;
        type: "Story" | "Explorable";
    }[];
}, {
    id: string;
    paths: {
        id: string;
        type: "Story" | "Explorable";
    }[];
}>, "many">;

/**
 * /v2/files definition
 */
declare const FilesDTO: z.ZodArray<z.ZodObject<{
    /** The file identifier. */
    id: z.ZodString;
    /** The URL to the image. */
    icon: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    icon: string;
}, {
    id: string;
    icon: string;
}>, "many">;

/**
 * /v2/finishers definition
 */
declare const FinishersDTO: z.ZodArray<z.ZodObject<{
    /** The id of the finisher. */
    id: z.ZodNumber;
    /** A description explaining how to acquire the finisher. */
    unlock_details: z.ZodString;
    /** An array of item ids used to unlock the finisher. Can be resolved against v2/items */
    unlock_items: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    /** The order in which the finisher appears in a list. */
    order: z.ZodNumber;
    /** The icon uri for the finisher. */
    icon: z.ZodString;
    /** The name of the finisher as it appears in-game. */
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    order: number;
    icon: string;
    unlock_details: string;
    unlock_items?: number[] | undefined;
}, {
    id: number;
    name: string;
    order: number;
    icon: string;
    unlock_details: string;
    unlock_items?: number[] | undefined;
}>, "many">;

/**
 * /v2/gliders definition.
 */
declare const GlidersDTO: z.ZodArray<z.ZodObject<{
    /** The id of the glider. */
    id: z.ZodNumber;
    /** An array of item ids used to unlock the glider. Can be resolved against /v2/items. */
    unlock_items: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    /** The order in which the glider appears in a list. The value is not unique. */
    order: z.ZodNumber;
    /** The icon URL for the glider. */
    icon: z.ZodString;
    /** The name of the glider as it appears in-game. */
    name: z.ZodString;
    /** The in-game glider description. */
    description: z.ZodString;
    /** List of dye ids. Can be resolved against /v2/colors. */
    default_dyes: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    description: string;
    order: number;
    icon: string;
    default_dyes: number[];
    unlock_items?: number[] | undefined;
}, {
    id: number;
    name: string;
    description: string;
    order: number;
    icon: string;
    default_dyes: number[];
    unlock_items?: number[] | undefined;
}>, "many">;

/**
 * /v2/items definition
 */
declare const ItemsDTO: z.ZodArray<z.ZodObject<{
    /** The item id. */
    id: z.ZodNumber;
    /** The chat link. */
    chat_link: z.ZodString;
    /** The item name. */
    name: z.ZodString;
    /** The full icon url. */
    icon: z.ZodOptional<z.ZodString>;
    /** The item description. */
    description: z.ZodOptional<z.ZodString>;
    /** The item type. */
    type: z.ZodEnum<["Armor", "Back", "Bag", "Consumable", "Container", "CraftingMaterial", "Gathering", "Gizmo", "JadeTechModule", "Key", "MiniPet", "PowerCore", "Tool", "Trait", "Trinket", "Trophy", "UpgradeComponent", "Weapon"]>;
    /** The item rarity. */
    rarity: z.ZodEnum<["Junk", "Basic", "Fine", "Masterwork", "Rare", "Exotic", "Ascended", "Legendary"]>;
    /** The required level. */
    level: z.ZodNumber;
    /** The value in coins when selling to a vendor.
     * Note: Can be non-zero even when the item has the NoSell flag. */
    vendor_value: z.ZodNumber;
    /** The default skin id. */
    default_skin: z.ZodOptional<z.ZodNumber>;
    /** Flags applying to the item. */
    flags: z.ZodArray<z.ZodEnum<["AccountBindOnUse", "AccountBound", "Attuned", "BulkConsume", "DeleteWarning", "HideSuffix", "Infused", "MonsterOnly", "NoMysticForge", "NoSalvage", "NoSell", "NotUpgradeable", "NoUnderwater", "SoulbindOnAcquire", "SoulBindOnUse", "Tonic", "Unique"]>, "many">;
    /** The game types in which the item is usable.
     * At least one game type is specified. */
    game_types: z.ZodArray<z.ZodEnum<["Activity", "Dungeon", "Pve", "Pvp", "Wvw", "PvpLobby"]>, "many">;
    /** Restrictions applied to the item. */
    restrictions: z.ZodArray<z.ZodEnum<["Asura", "Charr", "Female", "Human", "Norn", "Sylvari", "Elementalist", "Engineer", "Guardian", "Mesmer", "Necromancer", "Ranger", "Thief", "Warrior"]>, "many">;
    /** Lists what items this item can be upgraded into, and the method of upgrading. */
    upgrades_into: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** Describes the method of upgrading. */
        upgrade: z.ZodEnum<["Attunement", "Infusion"]>;
        /** The item ID that results from performing the upgrade. */
        item_id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }, {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }>, "many">>;
    /** Lists what items this item can be upgraded from, and the method of upgrading. */
    upgrades_from: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** Describes the method of upgrading. */
        upgrade: z.ZodEnum<["Attunement", "Infusion"]>;
        /** The item ID that results from performing the upgrade. */
        item_id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }, {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }>, "many">>;
    /** Additional item details, if applicable. */
    details: z.ZodUnion<[z.ZodObject<{
        /** The armor slot type. */
        type: z.ZodEnum<["Boots", "Coat", "Gloves", "Helm", "HelmAquatic", "Leggings", "Shoulders"]>;
        /** The weight class of the armor piece. */
        weight_class: z.ZodEnum<["Heavy", "Medium", "Light", "Clothing"]>;
        /** The defense value of the armor piece. */
        defense: z.ZodNumber;
        /** Infusion slots of the armor piece. */
        infusion_slots: z.ZodArray<z.ZodObject<{
            /**
             * Infusion slot type of infusion upgrades.
             * The array contains a maximum of one value
             */
            flags: z.ZodArray<z.ZodEnum<["Enrichment", "Infusion"]>, "many">;
            /**
             * The infusion upgrade already in the armor piece.
             */
            item_id: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }>, "many">;
        /** The value used to calculate attributes. See /v2/itemstats. */
        attribute_adjustments: z.ZodNumber;
        /** The infix upgrade. */
        infix_upgrade: z.ZodOptional<z.ZodObject<{
            /** The itemstat id. Can be resolved against /v2/itemstats.
             * The usual whitelist restrictions apply, and not all itemstats may be visible. */
            id: z.ZodNumber;
            /** List of attribute bonuses. */
            attributes: z.ZodArray<z.ZodObject<{
                /** Attribute this bonus applies to. */
                attribute: z.ZodEnum<["AgonyResistance", "BoonDuration", "ConditionDamage", "ConditionDuration", "CritDamage", "Healing", "Power", "Precision", "Toughness", "Vitality"]>;
                /** The modifier value. */
                modifier: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }>, "many">;
            /** Object containing an additional effect.
             * This is used for Boon Duration, Condition Duration,
             * or additional attribute bonuses for ascended trinkets or back items. */
            buff: z.ZodOptional<z.ZodObject<{
                /** The skill id of the effect. */
                skill_id: z.ZodNumber;
                /** The effect's description. */
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                skill_id: number;
                description?: string | undefined;
            }, {
                skill_id: number;
                description?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "HelmAquatic" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders";
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
    }, {
        type: "HelmAquatic" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders";
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
    }>, z.ZodObject<{
        /** Infusion slots of the back item. */
        infusion_slots: z.ZodArray<z.ZodObject<{
            /**
             * Infusion slot type of infusion upgrades.
             * The array contains a maximum of one value
             */
            flags: z.ZodArray<z.ZodEnum<["Enrichment", "Infusion"]>, "many">;
            /**
             * The infusion upgrade already in the armor piece.
             */
            item_id: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }>, "many">;
        /** The value used to calculate attributes. See /v2/itemstats. */
        attribute_adjustments: z.ZodOptional<z.ZodNumber>;
        /** The infix upgrade. */
        infix_upgrade: z.ZodOptional<z.ZodObject<{
            /** The itemstat id. Can be resolved against /v2/itemstats.
             * The usual whitelist restrictions apply, and not all itemstats may be visible. */
            id: z.ZodNumber;
            /** List of attribute bonuses. */
            attributes: z.ZodArray<z.ZodObject<{
                /** Attribute this bonus applies to. */
                attribute: z.ZodEnum<["AgonyResistance", "BoonDuration", "ConditionDamage", "ConditionDuration", "CritDamage", "Healing", "Power", "Precision", "Toughness", "Vitality"]>;
                /** The modifier value. */
                modifier: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }>, "many">;
            /** Object containing an additional effect.
             * This is used for Boon Duration, Condition Duration,
             * or additional attribute bonuses for ascended trinkets or back items. */
            buff: z.ZodOptional<z.ZodObject<{
                /** The skill id of the effect. */
                skill_id: z.ZodNumber;
                /** The effect's description. */
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                skill_id: number;
                description?: string | undefined;
            }, {
                skill_id: number;
                description?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }>>;
        /** The id of the item suffix. */
        suffix_item_id: z.ZodOptional<z.ZodNumber>;
        /** The secondary id of the item suffix. */
        secondary_suffix_item_id: z.ZodString;
        /** Selectable stat ids. Can be resolved by /v2/itemstats */
        stat_choices: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        secondary_suffix_item_id: string;
        attribute_adjustments?: number | undefined;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    }, {
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        secondary_suffix_item_id: string;
        attribute_adjustments?: number | undefined;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    }>, z.ZodObject<{
        /** The number of bag slots. */
        size: z.ZodNumber;
        /** Whether the bag is invisible or safe. */
        no_sell_or_sort: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        size: number;
        no_sell_or_sort: boolean;
    }, {
        size: number;
        no_sell_or_sort: boolean;
    }>, z.ZodObject<{
        /** Consumable type. */
        type: z.ZodEnum<["AppearanceChange", "Booze", "ContractNpc", "Currency", "Food", "Generic", "Halloween", "Immediate", "MountRandomUnlock", "RandomUnlock", "Transmutation", "Unlock", "UpgradeRemoval", "Utility", "TeleportToFriend"]>;
        /** Effect description for consumables applying an effect. */
        description: z.ZodOptional<z.ZodString>;
        /** Effect duration, in milliseconds. */
        duration_ms: z.ZodOptional<z.ZodNumber>;
        /** Unlock type for unlock consumables */
        unlock_type: z.ZodOptional<z.ZodEnum<["BagSlot", "BankTab", "Champion", "CollectibleCapacity", "Content", "CraftingRecipe", "Dye", "GliderSkin", "Minipet", "Ms", "Outfit", "RandomUnlock", "SharedSlot"]>>;
        /** The dye id for dye unlocks. */
        color_id: z.ZodOptional<z.ZodNumber>;
        /** The recipe id for recipe unlocks. */
        recipe_id: z.ZodOptional<z.ZodNumber>;
        /** Additional recipe ids for recipe unlocks */
        extra_recipe_ids: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        /** The guild upgrade id for the item. Can be resolved by /v2/guild/upgrades. */
        guild_upgrade_id: z.ZodOptional<z.ZodNumber>;
        /** The number of stacks of the effect applied by this item. */
        apply_count: z.ZodOptional<z.ZodNumber>;
        /** The effect type name of the consumable. */
        name: z.ZodOptional<z.ZodString>;
        /** The icon of the effect. */
        icon: z.ZodOptional<z.ZodString>;
        /** A list of skin ids which this item unlocks. Can be resolved by /v2/skins. */
        skins: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "Currency" | "Unlock" | "AppearanceChange" | "Booze" | "ContractNpc" | "Food" | "Generic" | "Halloween" | "Immediate" | "MountRandomUnlock" | "RandomUnlock" | "Transmutation" | "UpgradeRemoval" | "Utility" | "TeleportToFriend";
        skins?: number[] | undefined;
        name?: string | undefined;
        description?: string | undefined;
        icon?: string | undefined;
        recipe_id?: number | undefined;
        duration_ms?: number | undefined;
        unlock_type?: "RandomUnlock" | "BagSlot" | "BankTab" | "Champion" | "CollectibleCapacity" | "Content" | "CraftingRecipe" | "Dye" | "GliderSkin" | "Minipet" | "Ms" | "Outfit" | "SharedSlot" | undefined;
        color_id?: number | undefined;
        extra_recipe_ids?: number[] | undefined;
        guild_upgrade_id?: number | undefined;
        apply_count?: number | undefined;
    }, {
        type: "Currency" | "Unlock" | "AppearanceChange" | "Booze" | "ContractNpc" | "Food" | "Generic" | "Halloween" | "Immediate" | "MountRandomUnlock" | "RandomUnlock" | "Transmutation" | "UpgradeRemoval" | "Utility" | "TeleportToFriend";
        skins?: number[] | undefined;
        name?: string | undefined;
        description?: string | undefined;
        icon?: string | undefined;
        recipe_id?: number | undefined;
        duration_ms?: number | undefined;
        unlock_type?: "RandomUnlock" | "BagSlot" | "BankTab" | "Champion" | "CollectibleCapacity" | "Content" | "CraftingRecipe" | "Dye" | "GliderSkin" | "Minipet" | "Ms" | "Outfit" | "SharedSlot" | undefined;
        color_id?: number | undefined;
        extra_recipe_ids?: number[] | undefined;
        guild_upgrade_id?: number | undefined;
        apply_count?: number | undefined;
    }>, z.ZodObject<{
        /** Container type. */
        type: z.ZodEnum<["Default", "GiftBox", "Immediate", "OpenUI"]>;
    }, "strip", z.ZodTypeAny, {
        type: "Immediate" | "Default" | "GiftBox" | "OpenUI";
    }, {
        type: "Immediate" | "Default" | "GiftBox" | "OpenUI";
    }>, z.ZodObject<{
        /** Gathering utility type. */
        type: z.ZodEnum<["Foraging", "Logging", "Mining", "Bait", "Lure"]>;
    }, "strip", z.ZodTypeAny, {
        type: "Foraging" | "Logging" | "Mining" | "Bait" | "Lure";
    }, {
        type: "Foraging" | "Logging" | "Mining" | "Bait" | "Lure";
    }>, z.ZodObject<{
        /** Gizmo type. */
        type: z.ZodEnum<["Default", "ContainerKey", "RentableContractNpc", "UnlimitedConsumable"]>;
        /** The id of the guild decoration, which can be deposited. Can be resolved by /v2/guild/upgrades. */
        guild_upgrade_id: z.ZodOptional<z.ZodNumber>;
        /** Vendor ids of the gizmo. */
        vendor_ids: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "Default" | "ContainerKey" | "RentableContractNpc" | "UnlimitedConsumable";
        guild_upgrade_id?: number | undefined;
        vendor_ids?: number[] | undefined;
    }, {
        type: "Default" | "ContainerKey" | "RentableContractNpc" | "UnlimitedConsumable";
        guild_upgrade_id?: number | undefined;
        vendor_ids?: number[] | undefined;
    }>, z.ZodObject<{
        /** The miniature this item unlocks. Can be resolved by /v2/minis. */
        minipet_id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minipet_id: number;
    }, {
        minipet_id: number;
    }>, z.ZodObject<{
        /** The tool type. Always the same value. */
        type: z.ZodLiteral<"Salvage">;
        /** Number of charges. */
        charges: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Salvage";
        charges: number;
    }, {
        type: "Salvage";
        charges: number;
    }>, z.ZodObject<{
        /** The trinket type. */
        type: z.ZodEnum<["Accessory", "Amulet", "Ring"]>;
        /** Infusion slots of the trinket. */
        infusion_slots: z.ZodArray<z.ZodObject<{
            /**
             * Infusion slot type of infusion upgrades.
             * The array contains a maximum of one value
             */
            flags: z.ZodArray<z.ZodEnum<["Enrichment", "Infusion"]>, "many">;
            /**
             * The infusion upgrade already in the armor piece.
             */
            item_id: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }>, "many">;
        /** The value used to calculate attributes. See /v2/itemstats */
        attribute_adjustments: z.ZodNumber;
        /** The infix upgrade. */
        infix_upgrade: z.ZodOptional<z.ZodObject<{
            /** The itemstat id. Can be resolved against /v2/itemstats.
             * The usual whitelist restrictions apply, and not all itemstats may be visible. */
            id: z.ZodNumber;
            /** List of attribute bonuses. */
            attributes: z.ZodArray<z.ZodObject<{
                /** Attribute this bonus applies to. */
                attribute: z.ZodEnum<["AgonyResistance", "BoonDuration", "ConditionDamage", "ConditionDuration", "CritDamage", "Healing", "Power", "Precision", "Toughness", "Vitality"]>;
                /** The modifier value. */
                modifier: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }>, "many">;
            /** Object containing an additional effect.
             * This is used for Boon Duration, Condition Duration,
             * or additional attribute bonuses for ascended trinkets or back items. */
            buff: z.ZodOptional<z.ZodObject<{
                /** The skill id of the effect. */
                skill_id: z.ZodNumber;
                /** The effect's description. */
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                skill_id: number;
                description?: string | undefined;
            }, {
                skill_id: number;
                description?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }>>;
        /** The id of the item suffix. */
        suffix_item_id: z.ZodOptional<z.ZodNumber>;
        /** The secondary id of the item suffix. */
        secondary_suffix_item_id: z.ZodString;
        /** Selectable stat ids. Can be resolved by /v2/itemstats */
        stat_choices: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "Amulet" | "Accessory" | "Ring";
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    }, {
        type: "Amulet" | "Accessory" | "Ring";
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    }>, z.ZodObject<{
        /** The upgrade component type. */
        type: z.ZodEnum<["Default", "Gem", "Rune", "Sigil"]>;
        /** The items that can be upgraded with the upgrade component. */
        flags: z.ZodArray<z.ZodEnum<["Axe", "Dagger", "Focus", "Greatsword", "Hammer", "Harpoon", "LongBow", "Mace", "Pistol", "Rifle", "Scepter", "Shield", "ShortBow", "LongBow", "Speargun", "Staff", "Sword", "Torch", "Trident", "Warhorn", "HeavyArmor", "MediumArmor", "LightArmor", "Trinket"]>, "many">;
        /** Applicable infusion slot for infusion upgrades. */
        infusion_upgrade_flags: z.ZodArray<z.ZodEnum<["Enrichment", "Infusion"]>, "many">;
        /** The suffix appended to the item name when the component is applied. */
        suffix: z.ZodOptional<z.ZodString>;
        /** The infix upgrade object. */
        infix_upgrade: z.ZodObject<{
            /** The itemstat id. Can be resolved against /v2/itemstats.
             * The usual whitelist restrictions apply, and not all itemstats may be visible. */
            id: z.ZodNumber;
            /** List of attribute bonuses. */
            attributes: z.ZodArray<z.ZodObject<{
                /** Attribute this bonus applies to. */
                attribute: z.ZodEnum<["AgonyResistance", "BoonDuration", "ConditionDamage", "ConditionDuration", "CritDamage", "Healing", "Power", "Precision", "Toughness", "Vitality"]>;
                /** The modifier value. */
                modifier: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }>, "many">;
            /** Object containing an additional effect.
             * This is used for Boon Duration, Condition Duration,
             * or additional attribute bonuses for ascended trinkets or back items. */
            buff: z.ZodOptional<z.ZodObject<{
                /** The skill id of the effect. */
                skill_id: z.ZodNumber;
                /** The effect's description. */
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                skill_id: number;
                description?: string | undefined;
            }, {
                skill_id: number;
                description?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }>;
        /** The bonuses from runes. */
        bonuses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "Default" | "Gem" | "Rune" | "Sigil";
        flags: ("Axe" | "Trinket" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "HeavyArmor" | "MediumArmor" | "LightArmor")[];
        infix_upgrade: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        };
        infusion_upgrade_flags: ("Infusion" | "Enrichment")[];
        suffix?: string | undefined;
        bonuses?: string[] | undefined;
    }, {
        type: "Default" | "Gem" | "Rune" | "Sigil";
        flags: ("Axe" | "Trinket" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "HeavyArmor" | "MediumArmor" | "LightArmor")[];
        infix_upgrade: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        };
        infusion_upgrade_flags: ("Infusion" | "Enrichment")[];
        suffix?: string | undefined;
        bonuses?: string[] | undefined;
    }>, z.ZodObject<{
        /** The weapon type. */
        type: z.ZodEnum<["Axe", "Dagger", "Mace", "Pistol", "Scepter", "Sword", "Focus", "Shield", "Torch", "Warhorn", "Greatsword", "Hammer", "LongBow", "Rifle", "ShortBow", "Staff", "Harpoon", "Speargun", "Trident", "LargeBundle", "SmallBundle", "Toy", "ToyTwoHanded"]>;
        /** The damage type. */
        damage_type: z.ZodEnum<["Fire", "Ice", "Lightning", "Physical", "Choking"]>;
        /** Minimum weapon power. */
        min_power: z.ZodNumber;
        /** Maximum weapon power; */
        max_power: z.ZodNumber;
        /** The defense value of the weapon. */
        defense: z.ZodNumber;
        /** Infusion slots of the trinket. */
        infusion_slots: z.ZodArray<z.ZodObject<{
            /**
             * Infusion slot type of infusion upgrades.
             * The array contains a maximum of one value
             */
            flags: z.ZodArray<z.ZodEnum<["Enrichment", "Infusion"]>, "many">;
            /**
             * The infusion upgrade already in the armor piece.
             */
            item_id: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }, {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }>, "many">;
        /** The value used to calculate attributes. See /v2/itemstats. */
        attribute_adjustments: z.ZodNumber;
        /** The infix upgrade. */
        infix_upgrade: z.ZodOptional<z.ZodObject<{
            /** The itemstat id. Can be resolved against /v2/itemstats.
             * The usual whitelist restrictions apply, and not all itemstats may be visible. */
            id: z.ZodNumber;
            /** List of attribute bonuses. */
            attributes: z.ZodArray<z.ZodObject<{
                /** Attribute this bonus applies to. */
                attribute: z.ZodEnum<["AgonyResistance", "BoonDuration", "ConditionDamage", "ConditionDuration", "CritDamage", "Healing", "Power", "Precision", "Toughness", "Vitality"]>;
                /** The modifier value. */
                modifier: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }, {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }>, "many">;
            /** Object containing an additional effect.
             * This is used for Boon Duration, Condition Duration,
             * or additional attribute bonuses for ascended trinkets or back items. */
            buff: z.ZodOptional<z.ZodObject<{
                /** The skill id of the effect. */
                skill_id: z.ZodNumber;
                /** The effect's description. */
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                skill_id: number;
                description?: string | undefined;
            }, {
                skill_id: number;
                description?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }, {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        }>>;
        /** The id of the item suffix. */
        suffix_item_id: z.ZodOptional<z.ZodNumber>;
        /** The secondary id of the item suffix. */
        secondary_suffix_item_id: z.ZodString;
        /** Selectable stat ids. Can be resolved by /v2/itemstats */
        stat_choices: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        type: "Axe" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "LargeBundle" | "SmallBundle" | "Toy" | "ToyTwoHanded";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
        min_power: number;
        max_power: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    }, {
        type: "Axe" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "LargeBundle" | "SmallBundle" | "Toy" | "ToyTwoHanded";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
        min_power: number;
        max_power: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    type: "PowerCore" | "Consumable" | "Armor" | "Back" | "Bag" | "Container" | "CraftingMaterial" | "Gathering" | "Gizmo" | "JadeTechModule" | "Key" | "MiniPet" | "Tool" | "Trait" | "Trinket" | "Trophy" | "UpgradeComponent" | "Weapon";
    level: number;
    chat_link: string;
    flags: ("AccountBindOnUse" | "AccountBound" | "Attuned" | "BulkConsume" | "DeleteWarning" | "HideSuffix" | "Infused" | "MonsterOnly" | "NoMysticForge" | "NoSalvage" | "NoSell" | "NotUpgradeable" | "NoUnderwater" | "SoulbindOnAcquire" | "SoulBindOnUse" | "Tonic" | "Unique")[];
    rarity: "Rare" | "Junk" | "Basic" | "Fine" | "Masterwork" | "Exotic" | "Ascended" | "Legendary";
    vendor_value: number;
    game_types: ("Activity" | "Dungeon" | "Pve" | "Pvp" | "Wvw" | "PvpLobby")[];
    restrictions: ("Asura" | "Charr" | "Human" | "Norn" | "Sylvari" | "Female" | "Elementalist" | "Engineer" | "Guardian" | "Mesmer" | "Necromancer" | "Ranger" | "Thief" | "Warrior")[];
    details: {
        type: "HelmAquatic" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders";
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
    } | {
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        secondary_suffix_item_id: string;
        attribute_adjustments?: number | undefined;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    } | {
        size: number;
        no_sell_or_sort: boolean;
    } | {
        type: "Currency" | "Unlock" | "AppearanceChange" | "Booze" | "ContractNpc" | "Food" | "Generic" | "Halloween" | "Immediate" | "MountRandomUnlock" | "RandomUnlock" | "Transmutation" | "UpgradeRemoval" | "Utility" | "TeleportToFriend";
        skins?: number[] | undefined;
        name?: string | undefined;
        description?: string | undefined;
        icon?: string | undefined;
        recipe_id?: number | undefined;
        duration_ms?: number | undefined;
        unlock_type?: "RandomUnlock" | "BagSlot" | "BankTab" | "Champion" | "CollectibleCapacity" | "Content" | "CraftingRecipe" | "Dye" | "GliderSkin" | "Minipet" | "Ms" | "Outfit" | "SharedSlot" | undefined;
        color_id?: number | undefined;
        extra_recipe_ids?: number[] | undefined;
        guild_upgrade_id?: number | undefined;
        apply_count?: number | undefined;
    } | {
        type: "Immediate" | "Default" | "GiftBox" | "OpenUI";
    } | {
        type: "Foraging" | "Logging" | "Mining" | "Bait" | "Lure";
    } | {
        type: "Default" | "ContainerKey" | "RentableContractNpc" | "UnlimitedConsumable";
        guild_upgrade_id?: number | undefined;
        vendor_ids?: number[] | undefined;
    } | {
        minipet_id: number;
    } | {
        type: "Salvage";
        charges: number;
    } | {
        type: "Amulet" | "Accessory" | "Ring";
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    } | {
        type: "Default" | "Gem" | "Rune" | "Sigil";
        flags: ("Axe" | "Trinket" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "HeavyArmor" | "MediumArmor" | "LightArmor")[];
        infix_upgrade: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        };
        infusion_upgrade_flags: ("Infusion" | "Enrichment")[];
        suffix?: string | undefined;
        bonuses?: string[] | undefined;
    } | {
        type: "Axe" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "LargeBundle" | "SmallBundle" | "Toy" | "ToyTwoHanded";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
        min_power: number;
        max_power: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    };
    description?: string | undefined;
    icon?: string | undefined;
    default_skin?: number | undefined;
    upgrades_into?: {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }[] | undefined;
    upgrades_from?: {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }[] | undefined;
}, {
    id: number;
    name: string;
    type: "PowerCore" | "Consumable" | "Armor" | "Back" | "Bag" | "Container" | "CraftingMaterial" | "Gathering" | "Gizmo" | "JadeTechModule" | "Key" | "MiniPet" | "Tool" | "Trait" | "Trinket" | "Trophy" | "UpgradeComponent" | "Weapon";
    level: number;
    chat_link: string;
    flags: ("AccountBindOnUse" | "AccountBound" | "Attuned" | "BulkConsume" | "DeleteWarning" | "HideSuffix" | "Infused" | "MonsterOnly" | "NoMysticForge" | "NoSalvage" | "NoSell" | "NotUpgradeable" | "NoUnderwater" | "SoulbindOnAcquire" | "SoulBindOnUse" | "Tonic" | "Unique")[];
    rarity: "Rare" | "Junk" | "Basic" | "Fine" | "Masterwork" | "Exotic" | "Ascended" | "Legendary";
    vendor_value: number;
    game_types: ("Activity" | "Dungeon" | "Pve" | "Pvp" | "Wvw" | "PvpLobby")[];
    restrictions: ("Asura" | "Charr" | "Human" | "Norn" | "Sylvari" | "Female" | "Elementalist" | "Engineer" | "Guardian" | "Mesmer" | "Necromancer" | "Ranger" | "Thief" | "Warrior")[];
    details: {
        type: "HelmAquatic" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders";
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
    } | {
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        secondary_suffix_item_id: string;
        attribute_adjustments?: number | undefined;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    } | {
        size: number;
        no_sell_or_sort: boolean;
    } | {
        type: "Currency" | "Unlock" | "AppearanceChange" | "Booze" | "ContractNpc" | "Food" | "Generic" | "Halloween" | "Immediate" | "MountRandomUnlock" | "RandomUnlock" | "Transmutation" | "UpgradeRemoval" | "Utility" | "TeleportToFriend";
        skins?: number[] | undefined;
        name?: string | undefined;
        description?: string | undefined;
        icon?: string | undefined;
        recipe_id?: number | undefined;
        duration_ms?: number | undefined;
        unlock_type?: "RandomUnlock" | "BagSlot" | "BankTab" | "Champion" | "CollectibleCapacity" | "Content" | "CraftingRecipe" | "Dye" | "GliderSkin" | "Minipet" | "Ms" | "Outfit" | "SharedSlot" | undefined;
        color_id?: number | undefined;
        extra_recipe_ids?: number[] | undefined;
        guild_upgrade_id?: number | undefined;
        apply_count?: number | undefined;
    } | {
        type: "Immediate" | "Default" | "GiftBox" | "OpenUI";
    } | {
        type: "Foraging" | "Logging" | "Mining" | "Bait" | "Lure";
    } | {
        type: "Default" | "ContainerKey" | "RentableContractNpc" | "UnlimitedConsumable";
        guild_upgrade_id?: number | undefined;
        vendor_ids?: number[] | undefined;
    } | {
        minipet_id: number;
    } | {
        type: "Salvage";
        charges: number;
    } | {
        type: "Amulet" | "Accessory" | "Ring";
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    } | {
        type: "Default" | "Gem" | "Rune" | "Sigil";
        flags: ("Axe" | "Trinket" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "HeavyArmor" | "MediumArmor" | "LightArmor")[];
        infix_upgrade: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        };
        infusion_upgrade_flags: ("Infusion" | "Enrichment")[];
        suffix?: string | undefined;
        bonuses?: string[] | undefined;
    } | {
        type: "Axe" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "LargeBundle" | "SmallBundle" | "Toy" | "ToyTwoHanded";
        defense: number;
        infusion_slots: {
            flags: ("Infusion" | "Enrichment")[];
            item_id?: number | undefined;
        }[];
        attribute_adjustments: number;
        secondary_suffix_item_id: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
        min_power: number;
        max_power: number;
        infix_upgrade?: {
            id: number;
            attributes: {
                attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
                modifier: number;
            }[];
            buff?: {
                skill_id: number;
                description?: string | undefined;
            } | undefined;
        } | undefined;
        suffix_item_id?: number | undefined;
        stat_choices?: number[] | undefined;
    };
    description?: string | undefined;
    icon?: string | undefined;
    default_skin?: number | undefined;
    upgrades_into?: {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }[] | undefined;
    upgrades_from?: {
        item_id: number;
        upgrade: "Attunement" | "Infusion";
    }[] | undefined;
}>, "many">;

/**
 * /v2/itemstats definition
 */
declare const ItemStatsDTO: z.ZodArray<z.ZodObject<{
    /** The itemstat id. */
    id: z.ZodNumber;
    /** The name of the set of stats. */
    name: z.ZodString;
    /** The list of bonus attributes. */
    attributes: z.ZodArray<z.ZodObject<{
        /** The name of the attribute. */
        attribute: z.ZodEnum<["AgonyResistance", "BoonDuration", "ConditionDamage", "ConditionDuration", "CritDamage", "Healing", "Power", "Precision", "Toughness", "Vitality"]>;
        /** The multiplier number for that attribute. */
        multiplier: z.ZodNumber;
        /** The value number for that attribute. */
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
        multiplier: number;
    }, {
        value: number;
        attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
        multiplier: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    attributes: {
        value: number;
        attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
        multiplier: number;
    }[];
}, {
    id: number;
    name: string;
    attributes: {
        value: number;
        attribute: "AgonyResistance" | "BoonDuration" | "ConditionDamage" | "ConditionDuration" | "CritDamage" | "Healing" | "Power" | "Precision" | "Toughness" | "Vitality";
        multiplier: number;
    }[];
}>, "many">;

/**
 * /v2/jadebots definition
 */
declare const JadebotsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the jade bot skin. */
    id: z.ZodNumber;
    /** The name of the jade bot skin. */
    name: z.ZodString;
    /** A description of how to unlock the skin. */
    description: z.ZodString;
    /** The item which unlocks the skin. Can be resolved against /v2/items */
    unlock_item: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    description: string;
    unlock_item: number;
}, {
    id: number;
    name: string;
    description: string;
    unlock_item: number;
}>, "many">;

/**
 * /v2/legendaryarmory definition
 */
declare const LegendaryArmoryDTO: z.ZodArray<z.ZodObject<{
    /** The item id of the legendary armory item. */
    id: z.ZodNumber;
    /** The maximum quantity of the legendary armory item that can be stored on the account. */
    max_count: z.ZodUnion<[z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<7>, z.ZodLiteral<8>]>;
}, "strip", z.ZodTypeAny, {
    id: number;
    max_count: 4 | 2 | 1 | 7 | 8;
}, {
    id: number;
    max_count: 4 | 2 | 1 | 7 | 8;
}>, "many">;

/**
 * /v2/legends definition.
 */
declare const LegendsDTO: z.ZodArray<z.ZodObject<{
    /** Id of the legend. */
    id: z.ZodString;
    /** The legend code for a build template link. Available on schema version 2019-12-19T00:00:00.000Z or later. */
    code: z.ZodOptional<z.ZodNumber>;
    /** The id of the profession (swap Legend) skill. Can be resolved against /v2/skills. */
    swap: z.ZodNumber;
    /** The id of the heal skill. Can be resolved against /v2/skills. */
    heal: z.ZodNumber;
    /** The id of the elite skill. Can be resolved against /v2/skills. */
    elite: z.ZodNumber;
    /** The ids of the utility skills. Can be resolved against /v2/skills. */
    utilities: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    heal: number;
    utilities: number[];
    elite: number;
    swap: number;
    code?: number | undefined;
}, {
    id: string;
    heal: number;
    utilities: number[];
    elite: number;
    swap: number;
    code?: number | undefined;
}>, "many">;

/**
 * /v2/mailcarriers definition.
 */
declare const MailCarriersDTO: z.ZodArray<z.ZodObject<{
    /** The id of the mail carrier. */
    id: z.ZodNumber;
    /** An array of item ids used to unlock the mailcarrier. Can be resolved against /v2/items. */
    unlock_items: z.ZodArray<z.ZodNumber, "many">;
    /** The order in which the mailcarrier appears in a list. */
    order: z.ZodNumber;
    /** The icon uri for the mail carrier. */
    icon: z.ZodString;
    /** The name of the mailcarrier as it appears in-game. */
    name: z.ZodString;
    /** Additional flags on the item, such as "Default" */
    flags: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    order: number;
    icon: string;
    flags: string[];
    unlock_items: number[];
}, {
    id: number;
    name: string;
    order: number;
    icon: string;
    flags: string[];
    unlock_items: number[];
}>, "many">;

/**
 * /v2/maps definition
 */
declare const MapsDTO: z.ZodArray<z.ZodObject<{
    /** The map id. */
    id: z.ZodNumber;
    /** The map name. */
    name: z.ZodString;
    /** The minimal level for this map. */
    min_level: z.ZodNumber;
    /** The maximum level for this map. */
    max_level: z.ZodNumber;
    /** The default floor for this map. */
    default_floor: z.ZodNumber;
    /** The map type. */
    type: z.ZodEnum<["BlueHome", "Center", "EdgeOfTheMists", "GreenHome", "Instance", "JumpPuzzle", "Public", "Pvp", "RedHome", "Tutorial", "Unknown"]>;
    /** A list of available floors for this map. */
    floors: z.ZodArray<z.ZodNumber, "many">;
    /** The id of the region this map belongs to. */
    region_id: z.ZodOptional<z.ZodNumber>;
    /** The name of the region this map belongs to. */
    region_name: z.ZodOptional<z.ZodString>;
    /** The id of the continent this map belongs to. */
    continent_id: z.ZodOptional<z.ZodNumber>;
    /** The name of the continent this map belongs to. */
    continent_name: z.ZodOptional<z.ZodString>;
    /** The dimensions of the map, given as the coordinates of the lower-left (SW) and upper-right (NE) corners. */
    map_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
    /** The dimensions of the map within the continent coordinate system, given as the coordinates of the upper-left (NW) and lower-right (SE) corners. */
    continent_rect: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
}, "strip", z.ZodTypeAny, {
    floors: number[];
    id: number;
    name: string;
    type: "Pvp" | "BlueHome" | "Center" | "EdgeOfTheMists" | "GreenHome" | "Instance" | "JumpPuzzle" | "Public" | "RedHome" | "Tutorial" | "Unknown";
    min_level: number;
    max_level: number;
    default_floor: number;
    map_rect: number[][];
    continent_rect: number[][];
    region_id?: number | undefined;
    region_name?: string | undefined;
    continent_id?: number | undefined;
    continent_name?: string | undefined;
}, {
    floors: number[];
    id: number;
    name: string;
    type: "Pvp" | "BlueHome" | "Center" | "EdgeOfTheMists" | "GreenHome" | "Instance" | "JumpPuzzle" | "Public" | "RedHome" | "Tutorial" | "Unknown";
    min_level: number;
    max_level: number;
    default_floor: number;
    map_rect: number[][];
    continent_rect: number[][];
    region_id?: number | undefined;
    region_name?: string | undefined;
    continent_id?: number | undefined;
    continent_name?: string | undefined;
}>, "many">;

/**
 * /v2/materials definition.
 */
declare const MaterialsDTO: z.ZodArray<z.ZodObject<{
    /** The category id. */
    id: z.ZodNumber;
    /** The category name. */
    name: z.ZodString;
    /** The ids of the items in this category. Can be resolved against /v2/items. */
    items: z.ZodArray<z.ZodNumber, "many">;
    /** The order in which the category appears in the material storage. */
    order: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    items: number[];
    id: number;
    name: string;
    order: number;
}, {
    items: number[];
    id: number;
    name: string;
    order: number;
}>, "many">;

/**
 * /v2/masteries definition.
 */
declare const MasteriesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the mastery. */
    id: z.ZodNumber;
    /** The name of the selected mastery. */
    name: z.ZodString;
    /** The written out requirements to unlock the mastery track. */
    requirement: z.ZodString;
    /** The order in which the mastery track appears in a list. */
    order: z.ZodNumber;
    /** The background uri for the mastery track. */
    background: z.ZodString;
    /** The in-game region in which the mastery track belongs. */
    region: z.ZodString;
    /** An array containing the information of each mastery level. */
    levels: z.ZodArray<z.ZodObject<{
        /** The name for the given mastery. */
        name: z.ZodString;
        /** The in game description for the given mastery. */
        description: z.ZodString;
        /** The in game instructions for the given mastery. */
        instruction: z.ZodString;
        /** The icon uri for the mastery. */
        icon: z.ZodString;
        /** The amount of mastery points required to unlock the mastery. */
        point_cost: z.ZodNumber;
        /** The total amount of experience needed to train the given mastery level. This total is non-cumulative between levels. */
        exp_cost: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        icon: string;
        instruction: string;
        point_cost: number;
        exp_cost: number;
    }, {
        name: string;
        description: string;
        icon: string;
        instruction: string;
        point_cost: number;
        exp_cost: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    region: string;
    order: number;
    background: string;
    requirement: string;
    levels: {
        name: string;
        description: string;
        icon: string;
        instruction: string;
        point_cost: number;
        exp_cost: number;
    }[];
}, {
    id: number;
    name: string;
    region: string;
    order: number;
    background: string;
    requirement: string;
    levels: {
        name: string;
        description: string;
        icon: string;
        instruction: string;
        point_cost: number;
        exp_cost: number;
    }[];
}>, "many">;

/**
 * /v2/minis definition.
 */
declare const MinisDTO: z.ZodArray<z.ZodObject<{
    /** The mini id. */
    id: z.ZodNumber;
    /** The mini name. */
    name: z.ZodString;
    /** A description of how to unlock the mini (only present on a few entries). */
    unlock: z.ZodOptional<z.ZodString>;
    /** The mini icon. */
    icon: z.ZodString;
    /** The sort order that is used for displaying the mini in-game. */
    order: z.ZodNumber;
    /** The item which unlocks the mini. Can be resolved against /v2/items. */
    item_id: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    item_id: number;
    order: number;
    icon: string;
    unlock?: string | undefined;
}, {
    id: number;
    name: string;
    item_id: number;
    order: number;
    icon: string;
    unlock?: string | undefined;
}>, "many">;

/**
 * /v2/novelties definition
 */
declare const NoveltiesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the novelty. */
    id: z.ZodNumber;
    /** The name of the novelty as it appears in-game. */
    name: z.ZodString;
    /** The in-game novelty description. */
    description: z.ZodString;
    /** The icon url for the novelty. */
    icon: z.ZodString;
    /** The slot which the novelty appears in the UI for. */
    slot: z.ZodEnum<["Chair", "Music", "HeldItem", "Miscellaneous", "Tonic"]>;
    /** An array of item ids used to unlock the novelty. Can be resolved against /v2/items. */
    unlock_item: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    description: string;
    icon: string;
    slot: "Tonic" | "Chair" | "Music" | "HeldItem" | "Miscellaneous";
    unlock_item: number[];
}, {
    id: number;
    name: string;
    description: string;
    icon: string;
    slot: "Tonic" | "Chair" | "Music" | "HeldItem" | "Miscellaneous";
    unlock_item: number[];
}>, "many">;

/**
 * /v2/outfits definition.
 */
declare const OutfitsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the outfit. */
    id: z.ZodNumber;
    /** The name of the outfit (this is also the outfit displayed over a character in-game.) */
    name: z.ZodString;
    /** The icon for the selected outfit. */
    icon: z.ZodString;
    /** An array of item id which unlock this outfit; Can be resolved against v2/items. */
    unlock_items: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    icon: string;
    unlock_items: number[];
}, {
    id: number;
    name: string;
    icon: string;
    unlock_items: number[];
}>, "many">;

/**
 * /v2/pets definition
 */
declare const PetsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the pet. */
    id: z.ZodNumber;
    /** The name of the pet. */
    name: z.ZodString;
    /** The description of the pet. */
    description: z.ZodString;
    /** The icon uri for the pet. */
    icon: z.ZodString;
    /** List of skill ids. Can be resolved against /v2/skills. */
    skills: z.ZodArray<z.ZodObject<{
        /** The id of the skill. */
        id: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
    }, {
        id: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    skills: {
        id: number;
    }[];
    id: number;
    name: string;
    description: string;
    icon: string;
}, {
    skills: {
        id: number;
    }[];
    id: number;
    name: string;
    description: string;
    icon: string;
}>, "many">;

/**
 * /v2/professions definition
 */
declare const ProfessionsDTO: z.ZodArray<z.ZodObject<{
    /** The profession id. */
    id: z.ZodString;
    /** The name of the profession. */
    name: z.ZodString;
    /** The profession code for a build template link. */
    code: z.ZodOptional<z.ZodNumber>;
    /** The icon for the profession. */
    icon: z.ZodString;
    /** The large icon for the profession. */
    icon_big: z.ZodString;
    /** The specialization ids. Can be resolved against /v2/specializations. */
    specializations: z.ZodArray<z.ZodNumber, "many">;
    /** List of training details. */
    training: z.ZodArray<z.ZodObject<{
        /** The id of the skill or specialization. Can be resolved against /v2/skills and /v2/specializations. */
        id: z.ZodNumber;
        /** The category for the training object. */
        category: z.ZodEnum<["Skills", "Specializations", "EliteSpecializations"]>;
        /** The name of the skill or specialization indicated by the category and id. */
        name: z.ZodString;
        /** List of skills and traits training details tracks objects. */
        track: z.ZodArray<z.ZodIntersection<z.ZodObject<{
            /** The cost to train this skill or trait. */
            cost: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cost: number;
        }, {
            cost: number;
        }>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            /** Whether this is a skill or trait. */
            type: z.ZodLiteral<"Trait">;
            /** The trait id. Can be resolved against /v2/traits. */
            trait_id: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Trait";
            trait_id: number;
        }, {
            type: "Trait";
            trait_id: number;
        }>, z.ZodObject<{
            /** Whether this is a skill or trait. */
            type: z.ZodLiteral<"Skill">;
            /** The skill id. Can be resolved against /v2/skills. */
            skill_id: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Skill";
            skill_id: number;
        }, {
            type: "Skill";
            skill_id: number;
        }>]>>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        name: string;
        category: "Skills" | "Specializations" | "EliteSpecializations";
        track: ({
            cost: number;
        } & ({
            type: "Trait";
            trait_id: number;
        } | {
            type: "Skill";
            skill_id: number;
        }))[];
    }, {
        id: number;
        name: string;
        category: "Skills" | "Specializations" | "EliteSpecializations";
        track: ({
            cost: number;
        } & ({
            type: "Trait";
            trait_id: number;
        } | {
            type: "Skill";
            skill_id: number;
        }))[];
    }>, "many">;
    weapons: z.ZodRecord<z.ZodEnum<["Axe", "Dagger", "Mace", "Pistol", "Sword", "Scepter", "Focus", "Shield", "Torch", "Warhorn", "Greatsword", "Hammer", "Longbow", "Rifle", "Shortbow", "Staff", "Speargun", "Spear", "Trident"]>, z.ZodObject<{
        /** Weapon slot flag. */
        flag: z.ZodOptional<z.ZodArray<z.ZodEnum<["Mainhand", "Offhand", "TwoHand", "Aquatic"]>, "many">>;
        /** The specializations id of the required specialization to use this weapon.
         * Can be resolved against /v2/specializations. Only present if a specialization is required. */
        specialization: z.ZodOptional<z.ZodNumber>;
        /** The list of weapon skills objects. */
        skills: z.ZodArray<z.ZodObject<{
            /** The skill id. Can be resolved against /v2/skills. */
            id: z.ZodNumber;
            /** The skill bar slot that this weapon skill can be used in. */
            slot: z.ZodUnion<[z.ZodEnum<["Profession_1", "Utility", "Heal", "Elite"]>, z.ZodType<`Weapon_${number}`, z.ZodTypeDef, `Weapon_${number}`>]>;
            /** The name of the offhand weapon this skill requires to be equipped. This field is usually only present for Thief skills. */
            offhand: z.ZodOptional<z.ZodString>;
            /** The Elementalist attunement that this skill requires. This field is usually only present for Elementalist skills. */
            attunement: z.ZodOptional<z.ZodString>;
            /** The name of the class the skill was stolen from. This only applies to thief stolen skills. */
            source: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            slot: "Utility" | "Profession_1" | "Heal" | "Elite" | `Weapon_${number}`;
            offhand?: string | undefined;
            attunement?: string | undefined;
            source?: string | undefined;
        }, {
            id: number;
            slot: "Utility" | "Profession_1" | "Heal" | "Elite" | `Weapon_${number}`;
            offhand?: string | undefined;
            attunement?: string | undefined;
            source?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        skills: {
            id: number;
            slot: "Utility" | "Profession_1" | "Heal" | "Elite" | `Weapon_${number}`;
            offhand?: string | undefined;
            attunement?: string | undefined;
            source?: string | undefined;
        }[];
        flag?: ("Mainhand" | "Offhand" | "TwoHand" | "Aquatic")[] | undefined;
        specialization?: number | undefined;
    }, {
        skills: {
            id: number;
            slot: "Utility" | "Profession_1" | "Heal" | "Elite" | `Weapon_${number}`;
            offhand?: string | undefined;
            attunement?: string | undefined;
            source?: string | undefined;
        }[];
        flag?: ("Mainhand" | "Offhand" | "TwoHand" | "Aquatic")[] | undefined;
        specialization?: number | undefined;
    }>>;
    /** Profession flags. */
    flags: z.ZodArray<z.ZodEnum<["NoRacialSkills", "NoWeaponSwap"]>, "many">;
    /** The first number is a skill palette ID obtained from a build template link, the second number is a skill ID.
     * Can be resolved against /v2/skills. */
    skills_by_palette: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    specializations: number[];
    training: {
        id: number;
        name: string;
        category: "Skills" | "Specializations" | "EliteSpecializations";
        track: ({
            cost: number;
        } & ({
            type: "Trait";
            trait_id: number;
        } | {
            type: "Skill";
            skill_id: number;
        }))[];
    }[];
    id: string;
    name: string;
    icon: string;
    flags: ("NoRacialSkills" | "NoWeaponSwap")[];
    icon_big: string;
    weapons: Partial<Record<"Axe" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "Longbow" | "Shortbow" | "Spear", {
        skills: {
            id: number;
            slot: "Utility" | "Profession_1" | "Heal" | "Elite" | `Weapon_${number}`;
            offhand?: string | undefined;
            attunement?: string | undefined;
            source?: string | undefined;
        }[];
        flag?: ("Mainhand" | "Offhand" | "TwoHand" | "Aquatic")[] | undefined;
        specialization?: number | undefined;
    }>>;
    code?: number | undefined;
    skills_by_palette?: number[] | undefined;
}, {
    specializations: number[];
    training: {
        id: number;
        name: string;
        category: "Skills" | "Specializations" | "EliteSpecializations";
        track: ({
            cost: number;
        } & ({
            type: "Trait";
            trait_id: number;
        } | {
            type: "Skill";
            skill_id: number;
        }))[];
    }[];
    id: string;
    name: string;
    icon: string;
    flags: ("NoRacialSkills" | "NoWeaponSwap")[];
    icon_big: string;
    weapons: Partial<Record<"Axe" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "Longbow" | "Shortbow" | "Spear", {
        skills: {
            id: number;
            slot: "Utility" | "Profession_1" | "Heal" | "Elite" | `Weapon_${number}`;
            offhand?: string | undefined;
            attunement?: string | undefined;
            source?: string | undefined;
        }[];
        flag?: ("Mainhand" | "Offhand" | "TwoHand" | "Aquatic")[] | undefined;
        specialization?: number | undefined;
    }>>;
    code?: number | undefined;
    skills_by_palette?: number[] | undefined;
}>, "many">;

/**
 * /v2/quaggans definition
 */
declare const QuaggansDTO: z.ZodArray<z.ZodObject<{
    /** The quaggan identifier. */
    id: z.ZodString;
    /** The URL to the quaggan image. */
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    id: string;
}, {
    url: string;
    id: string;
}>, "many">;

/**
 * /v2/quests definition.
 */
declare const QuestsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the quest. */
    id: z.ZodNumber;
    /** The name of the quest. */
    name: z.ZodString;
    /** The minimum level required for a character to begin this quest. */
    level: z.ZodNumber;
    /** The id for the story. Can be resolved against /v2/stories. */
    story: z.ZodNumber;
    /** An array of goal objects providing details about the goals for this quest. */
    goals: z.ZodArray<z.ZodObject<{
        /** The text displayed for the quest step if it is active. */
        active: z.ZodString;
        /** The text displayed for the quest step if it is complete. */
        complete: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        active: string;
        complete: string;
    }, {
        active: string;
        complete: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    level: number;
    story: number;
    goals: {
        active: string;
        complete: string;
    }[];
}, {
    id: number;
    name: string;
    level: number;
    story: number;
    goals: {
        active: string;
        complete: string;
    }[];
}>, "many">;

/**
 * /v2/races definition
 */
declare const RacesDTO: z.ZodArray<z.ZodObject<{
    /** The id/name of the race. */
    id: z.ZodString;
    /** An array of skill ids. Can be resolved against v2/skills. */
    skills: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    skills: number[];
    id: string;
}, {
    skills: number[];
    id: string;
}>, "many">;

/**
 * /v2/raids definition
 */
declare const RaidsDTO: z.ZodArray<z.ZodObject<{
    /** The name of the dungeon. */
    id: z.ZodString;
    /** An array of object containing the following: */
    wings: z.ZodArray<z.ZodObject<{
        /** The given name for the dungeon path. */
        id: z.ZodString;
        /** List of events within the raid or dungeon. */
        events: z.ZodArray<z.ZodObject<{
            /** The event/encounter name. */
            id: z.ZodString;
            /** The type of events. */
            type: z.ZodEnum<["Checkpoint", "Boss"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "Checkpoint" | "Boss";
        }, {
            id: string;
            type: "Checkpoint" | "Boss";
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        events: {
            id: string;
            type: "Checkpoint" | "Boss";
        }[];
    }, {
        id: string;
        events: {
            id: string;
            type: "Checkpoint" | "Boss";
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    wings: {
        id: string;
        events: {
            id: string;
            type: "Checkpoint" | "Boss";
        }[];
    }[];
}, {
    id: string;
    wings: {
        id: string;
        events: {
            id: string;
            type: "Checkpoint" | "Boss";
        }[];
    }[];
}>, "many">;

/**
 * /v2/recipes definition
 */
declare const RecipesDTO: z.ZodArray<z.ZodObject<{
    /** The recipe id. */
    id: z.ZodNumber;
    /** The recipe type. */
    type: z.ZodUnion<[z.ZodEnum<["Axe", "Dagger", "Focus", "Greatsword", "Hammer", "Harpoon", "LongBow", "Mace", "Pistol", "Rifle", "Scepter", "Shield", "ShortBow", "Speargun", "Staff", "Sword", "Torch", "Trident", "Warhorn"]>, z.ZodEnum<["Boots", "Coat", "Gloves", "Helm", "Leggings", "Shoulders"]>, z.ZodEnum<["Amulet", "Earring", "Ring"]>, z.ZodEnum<["Dessert", "Feast", "IngredientCooking", "Meal", "Seasoning", "Snack", "Soup", "Food"]>, z.ZodEnum<["Component", "Inscription", "Insignia", "LegendaryComponent"]>, z.ZodEnum<["Refinement", "RefinementEctoplasm", "RefinementObsidian"]>, z.ZodEnum<["GuildConsumable", "GuildDecoration", "GuildConsumableWvw"]>, z.ZodEnum<["Backpack", "Bag", "Bulk", "Consumable", "Dye", "Food", "Potion", "UpgradeComponent"]>]>;
    /** The item id of the produced item. Can be resolved against /v2/items. */
    output_item_id: z.ZodNumber;
    /** The amount of items produced. */
    output_item_count: z.ZodNumber;
    /** The time in milliseconds it takes to craft the item. */
    time_to_craft_ms: z.ZodNumber;
    /** The crafting disciplines that can use the recipe. */
    disciplines: z.ZodArray<z.ZodEnum<["Artificer", "Armorsmith", "Chef", "Huntsman", "Jeweler", "Leatherworker", "Tailor", "Weaponsmith", "Scribe"]>, "many">;
    /** The required rating to craft the recipe. */
    min_rating: z.ZodNumber;
    /** Flags applying to the recipe. */
    flags: z.ZodArray<z.ZodEnum<["AutoLearned", "LearnedFromItem"]>, "many">;
    /** List of recipe ingredients */
    ingredients: z.ZodArray<z.ZodObject<{
        /** Type of ingredient. */
        type: z.ZodEnum<["Currency", "Item"]>;
        /** The ingredient's id. Can be resolved against /v2/items or /v2/currencies, depending on type */
        id: z.ZodNumber;
        /** The quantity of this ingredient. */
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
        type: "Item" | "Currency";
        count: number;
    }, {
        id: number;
        type: "Item" | "Currency";
        count: number;
    }>, "many">;
    /** List of recipe ingredients that come from the guild such as decorations or schematics. */
    guild_ingredients: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** The id of the used guild upgrade. Can be resolved against /v2/guild/upgrades. */
        upgrade_id: z.ZodNumber;
        /** The quantity of this guild ingredient. */
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        count: number;
        upgrade_id: number;
    }, {
        count: number;
        upgrade_id: number;
    }>, "many">>;
    /** The id of the produced guild upgrade. Can be resolved against /v2/guild/upgrades. */
    output_upgrade_id: z.ZodOptional<z.ZodNumber>;
    /** The chat code for the recipe. */
    chat_link: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    type: "Backpack" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders" | "Amulet" | "Axe" | "Consumable" | "Bag" | "UpgradeComponent" | "Food" | "Dye" | "Ring" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "Earring" | "Dessert" | "Feast" | "IngredientCooking" | "Meal" | "Seasoning" | "Snack" | "Soup" | "Component" | "Inscription" | "Insignia" | "LegendaryComponent" | "Refinement" | "RefinementEctoplasm" | "RefinementObsidian" | "GuildConsumable" | "GuildDecoration" | "GuildConsumableWvw" | "Bulk" | "Potion";
    chat_link: string;
    flags: ("AutoLearned" | "LearnedFromItem")[];
    output_item_id: number;
    output_item_count: number;
    time_to_craft_ms: number;
    disciplines: ("Armorsmith" | "Artificer" | "Chef" | "Huntsman" | "Jeweler" | "Leatherworker" | "Scribe" | "Tailor" | "Weaponsmith")[];
    min_rating: number;
    ingredients: {
        id: number;
        type: "Item" | "Currency";
        count: number;
    }[];
    guild_ingredients?: {
        count: number;
        upgrade_id: number;
    }[] | undefined;
    output_upgrade_id?: number | undefined;
}, {
    id: number;
    type: "Backpack" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders" | "Amulet" | "Axe" | "Consumable" | "Bag" | "UpgradeComponent" | "Food" | "Dye" | "Ring" | "Dagger" | "Focus" | "Greatsword" | "Hammer" | "Harpoon" | "LongBow" | "Mace" | "Pistol" | "Rifle" | "Scepter" | "Shield" | "ShortBow" | "Speargun" | "Staff" | "Sword" | "Torch" | "Trident" | "Warhorn" | "Earring" | "Dessert" | "Feast" | "IngredientCooking" | "Meal" | "Seasoning" | "Snack" | "Soup" | "Component" | "Inscription" | "Insignia" | "LegendaryComponent" | "Refinement" | "RefinementEctoplasm" | "RefinementObsidian" | "GuildConsumable" | "GuildDecoration" | "GuildConsumableWvw" | "Bulk" | "Potion";
    chat_link: string;
    flags: ("AutoLearned" | "LearnedFromItem")[];
    output_item_id: number;
    output_item_count: number;
    time_to_craft_ms: number;
    disciplines: ("Armorsmith" | "Artificer" | "Chef" | "Huntsman" | "Jeweler" | "Leatherworker" | "Scribe" | "Tailor" | "Weaponsmith")[];
    min_rating: number;
    ingredients: {
        id: number;
        type: "Item" | "Currency";
        count: number;
    }[];
    guild_ingredients?: {
        count: number;
        upgrade_id: number;
    }[] | undefined;
    output_upgrade_id?: number | undefined;
}>, "many">;

/**
 * /v2/skiffs definition
 */
declare const SkiffsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the skiff skin. */
    id: z.ZodNumber;
    /** The name of the skiff skin. */
    name: z.ZodString;
    /** The full icon URL. */
    icon: z.ZodString;
    /** An object containing information on the available dye slots and defaults. */
    dye_slots: z.ZodArray<z.ZodObject<{
        /** The id of the default color. Can be resolved against v2/colors. */
        color_id: z.ZodNumber;
        /** The type of material. */
        material: z.ZodEnum<["metal", "leather", "cloth"]>;
    }, "strip", z.ZodTypeAny, {
        color_id: number;
        material: "cloth" | "leather" | "metal";
    }, {
        color_id: number;
        material: "cloth" | "leather" | "metal";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    icon: string;
    dye_slots: {
        color_id: number;
        material: "cloth" | "leather" | "metal";
    }[];
}, {
    id: number;
    name: string;
    icon: string;
    dye_slots: {
        color_id: number;
        material: "cloth" | "leather" | "metal";
    }[];
}>, "many">;

/**
 * /v2/skins definition
 */
declare const SkinsDTO: z.ZodArray<z.ZodObject<{
    /** The skin id. */
    id: z.ZodNumber;
    /** The name of the skin. */
    name: z.ZodString;
    /** The skin type, either Armor, Weapon, Back or Gathering. */
    type: z.ZodString;
    /**
     * Additional skin flags. Options:
     * ShowInWardrobe – When displayed in the account wardrobe (set for all skins listed in the API).
     * NoCost – When applying the skin is free.
     * HideIfLocked – When the skin is hidden until it is unlocked.
     * OverrideRarity - When the skin overrides item rarity when applied
     */
    flags: z.ZodArray<z.ZodEnum<["ShowInWardrobe", "NoCost", "HideIfLocked", "OverrideRarity"]>, "many">;
    /** Race restrictions that apply to the skin, e.g. Human will be a listed restriction, if the skin can only be applied to human characters. */
    restrictions: z.ZodArray<z.ZodString, "many">;
    /** The full icon URL. */
    icon: z.ZodString;
    /** The rarity of the skin */
    rarity: z.ZodString;
    /** Optional skin description. */
    description: z.ZodOptional<z.ZodString>;
    /** Additional skin details if applicable, depending on the skin type */
    details: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        /** The armor type (slot). */
        type: z.ZodString;
        /** The armor weight. */
        weight_class: z.ZodEnum<["Clothing", "Light", "Medium", "Heavy"]>;
        /** An object containing information on default slots and skin overrides.
         * If the array item is null, this means dye cannot be applied to that
         * slot, except if otherwise overriden by non-null values in the overrides array. */
        dye_slots: z.ZodObject<{
            default: z.ZodArray<z.ZodUnion<[z.ZodNull, z.ZodObject<{
                /** The id of the default color. Can be resolved against /v2/colors.*/
                color_id: z.ZodNumber;
                /** The type of material. */
                material: z.ZodEnum<["cloth", "leather", "metal"]>;
            }, "strip", z.ZodTypeAny, {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }, {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>]>, "many">;
            /** Object of race/gender overrides. */
            overrides: z.ZodRecord<z.ZodEnum<["AsuraMale", "AsuraFemale", "CharrMale", "CharrFemale", "HumanMale", "HumanFemale", "NornMale", "NornFemale", "SylvariMale", "SylvariFemale"]>, z.ZodObject<{
                /** The id of the default color. Can be resolved against /v2/colors. */
                color_id: z.ZodNumber;
                /** The type of material. */
                material: z.ZodEnum<["cloth", "leather", "metal"]>;
            }, "strip", z.ZodTypeAny, {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }, {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
        }, "strip", z.ZodTypeAny, {
            overrides: Partial<Record<"AsuraMale" | "AsuraFemale" | "CharrMale" | "CharrFemale" | "HumanMale" | "HumanFemale" | "NornMale" | "NornFemale" | "SylvariMale" | "SylvariFemale", {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
            default: ({
                color_id: number;
                material: "cloth" | "leather" | "metal";
            } | null)[];
        }, {
            overrides: Partial<Record<"AsuraMale" | "AsuraFemale" | "CharrMale" | "CharrFemale" | "HumanMale" | "HumanFemale" | "NornMale" | "NornFemale" | "SylvariMale" | "SylvariFemale", {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
            default: ({
                color_id: number;
                material: "cloth" | "leather" | "metal";
            } | null)[];
        }>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        dye_slots: {
            overrides: Partial<Record<"AsuraMale" | "AsuraFemale" | "CharrMale" | "CharrFemale" | "HumanMale" | "HumanFemale" | "NornMale" | "NornFemale" | "SylvariMale" | "SylvariFemale", {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
            default: ({
                color_id: number;
                material: "cloth" | "leather" | "metal";
            } | null)[];
        };
    }, {
        type: string;
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        dye_slots: {
            overrides: Partial<Record<"AsuraMale" | "AsuraFemale" | "CharrMale" | "CharrFemale" | "HumanMale" | "HumanFemale" | "NornMale" | "NornFemale" | "SylvariMale" | "SylvariFemale", {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
            default: ({
                color_id: number;
                material: "cloth" | "leather" | "metal";
            } | null)[];
        };
    }>, z.ZodObject<{
        /** The tool type. */
        type: z.ZodEnum<["Foraging", "Logging", "Mining"]>;
    }, "strip", z.ZodTypeAny, {
        type: "Foraging" | "Logging" | "Mining";
    }, {
        type: "Foraging" | "Logging" | "Mining";
    }>, z.ZodObject<{
        /** The weapon type. */
        type: z.ZodString;
        /** The damage type. */
        damage_type: z.ZodEnum<["Physical", "Fire", "Lightning", "Ice", "Choking"]>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
    }, {
        type: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
    }>]>>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    type: string;
    icon: string;
    flags: ("ShowInWardrobe" | "NoCost" | "HideIfLocked" | "OverrideRarity")[];
    rarity: string;
    restrictions: string[];
    description?: string | undefined;
    details?: {
        type: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
    } | {
        type: "Foraging" | "Logging" | "Mining";
    } | {
        type: string;
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        dye_slots: {
            overrides: Partial<Record<"AsuraMale" | "AsuraFemale" | "CharrMale" | "CharrFemale" | "HumanMale" | "HumanFemale" | "NornMale" | "NornFemale" | "SylvariMale" | "SylvariFemale", {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
            default: ({
                color_id: number;
                material: "cloth" | "leather" | "metal";
            } | null)[];
        };
    } | undefined;
}, {
    id: number;
    name: string;
    type: string;
    icon: string;
    flags: ("ShowInWardrobe" | "NoCost" | "HideIfLocked" | "OverrideRarity")[];
    rarity: string;
    restrictions: string[];
    description?: string | undefined;
    details?: {
        type: string;
        damage_type: "Fire" | "Ice" | "Lightning" | "Physical" | "Choking";
    } | {
        type: "Foraging" | "Logging" | "Mining";
    } | {
        type: string;
        weight_class: "Heavy" | "Medium" | "Light" | "Clothing";
        dye_slots: {
            overrides: Partial<Record<"AsuraMale" | "AsuraFemale" | "CharrMale" | "CharrFemale" | "HumanMale" | "HumanFemale" | "NornMale" | "NornFemale" | "SylvariMale" | "SylvariFemale", {
                color_id: number;
                material: "cloth" | "leather" | "metal";
            }>>;
            default: ({
                color_id: number;
                material: "cloth" | "leather" | "metal";
            } | null)[];
        };
    } | undefined;
}>, "many">;

/**
 * /v2/specializations definition
 */
declare const SpecializationsDTO: z.ZodArray<z.ZodObject<{
    /** The specialization's ID. */
    id: z.ZodNumber;
    /** The name of the specialization. */
    name: z.ZodString;
    /** The profession that this specialization belongs to. */
    profession: z.ZodString;
    /** True if this specialization is an Elite specialization, false otherwise. */
    elite: z.ZodBoolean;
    /** A URL to an icon of the specialization. */
    icon: z.ZodString;
    /** A URL to the background image of the specialization. */
    background: z.ZodString;
    /** Contains a list of IDs specifying the minor traits in the specialization. */
    minor_traits: z.ZodArray<z.ZodNumber, "many">;
    /** Contains a list of IDs specifying the major traits in the specialization. */
    major_traits: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    profession: string;
    elite: boolean;
    icon: string;
    background: string;
    minor_traits: number[];
    major_traits: number[];
}, {
    id: number;
    name: string;
    profession: string;
    elite: boolean;
    icon: string;
    background: string;
    minor_traits: number[];
    major_traits: number[];
}>, "many">;

/**
 * /v2/titles definition
 */
declare const TitlesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the title. */
    id: z.ZodNumber;
    /** The name of the title (this is also the title displayed over a character in-game.) */
    name: z.ZodString;
    /** The id of the achievement that grants this title. Can be resolved against /v2/achievements. */
    achievements: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    /** The amount of AP required to have said title. */
    ap_required: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    achievements?: number[] | undefined;
    ap_required?: number | undefined;
}, {
    id: number;
    name: string;
    achievements?: number[] | undefined;
    ap_required?: number | undefined;
}>, "many">;

/**
 * /v2/traits definition
 */
declare const TraitsDTO: z.ZodArray<z.ZodObject<{
    /** The trait id. */
    id: z.ZodNumber;
    /** The trait name. */
    name: z.ZodString;
    /** The trait's icon URL. */
    icon: z.ZodString;
    /** The trait description. */
    description: z.ZodOptional<z.ZodString>;
    /** The trait order. */
    order: z.ZodOptional<z.ZodNumber>;
    /** The id of the specialization this trait belongs to. */
    specialization: z.ZodNumber;
    /** The trait's tier (Adept, Master, Grandmaster) as a value from 1-3.
     * Elite specializations also contain a tier 0 minor trait, describing which weapon the elite specialization gains access to. */
    tier: z.ZodNumber;
    /** Either Major or Minor depending on the trait's slot.
     * Minor traits are the ones given immediately when choosing a specialization. */
    slot: z.ZodEnum<["Major", "Minor"]>;
    /** A list of tooltip facts associated with the trait itself. */
    facts: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodObject<{
        /** An arbitrary localized string describing the fact.*/
        text: z.ZodOptional<z.ZodString>;
        /** A URL to the icon shown with the fact. Not included with all facts.*/
        icon: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        icon?: string | undefined;
        text?: string | undefined;
    }, {
        icon?: string | undefined;
        text?: string | undefined;
    }>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"AttributeAdjust">;
        value: z.ZodNumber;
        target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "AttributeAdjust";
        target: string;
    }, {
        value: number;
        type: "AttributeAdjust";
        target: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Buff">;
        status: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        apply_count: z.ZodOptional<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    }, {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"BuffConversion">;
        /** The attribute that is used to calculate the attribute gain. */
        source: z.ZodString;
        /** How much of the source attribute is added to target. */
        percent: z.ZodNumber;
        /** The attribute that gets added to. */
        target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    }, {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"ComboField">;
        field_type: z.ZodEnum<["Air", "Dark", "Fire", "Ice", "Light", "Lightning", "Poison", "Smoke", "Ethereal", "Water"]>;
    }, "strip", z.ZodTypeAny, {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    }, {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"ComboFinisher">;
        finisher_type: z.ZodEnum<["Blast", "Leap", "Projectile", "Whirl"]>;
        percent: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    }, {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Damage">;
        hit_count: z.ZodNumber;
        dmg_multiplier: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    }, {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Distance">;
        distance: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Distance";
        distance: number;
    }, {
        type: "Distance";
        distance: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"NoData">;
    }, "strip", z.ZodTypeAny, {
        type: "NoData";
    }, {
        type: "NoData";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Number">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "Number";
    }, {
        value: number;
        type: "Number";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Percent">;
        percent: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Percent";
        percent: number;
    }, {
        type: "Percent";
        percent: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"PrefixedBuff">;
        status: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        apply_count: z.ZodNumber;
        duration: z.ZodNumber;
        prefix: z.ZodObject<{
            text: z.ZodString;
            icon: z.ZodString;
            status: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        }, {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    }, {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Radius">;
        distance: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Radius";
        distance: number;
    }, {
        type: "Radius";
        distance: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Range">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "Range";
    }, {
        value: number;
        type: "Range";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Recharge">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "Recharge";
    }, {
        value: number;
        type: "Recharge";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"StunBreak">;
        value: z.ZodLiteral<true>;
    }, "strip", z.ZodTypeAny, {
        value: true;
        type: "StunBreak";
    }, {
        value: true;
        type: "StunBreak";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Time">;
        duration: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Time";
        duration: number;
    }, {
        type: "Time";
        duration: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Unblockable">;
        value: z.ZodLiteral<true>;
    }, "strip", z.ZodTypeAny, {
        value: true;
        type: "Unblockable";
    }, {
        value: true;
        type: "Unblockable";
    }>, z.ZodObject<{
        type: z.ZodUndefined;
        /** Cost per cast. Life Force ONLY. */
        percent: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type?: undefined;
        percent?: number | undefined;
    }, {
        type?: undefined;
        percent?: number | undefined;
    }>]>>, "many">>;
    /** A list of additions or changes to tooltip facts where there is interplay between traits. */
    traited_facts: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
        /** An arbitrary localized string describing the fact.*/
        text: z.ZodOptional<z.ZodString>;
        /** A URL to the icon shown with the fact. Not included with all facts.*/
        icon: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        icon?: string | undefined;
        text?: string | undefined;
    }, {
        icon?: string | undefined;
        text?: string | undefined;
    }>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"AttributeAdjust">;
        value: z.ZodNumber;
        target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "AttributeAdjust";
        target: string;
    }, {
        value: number;
        type: "AttributeAdjust";
        target: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Buff">;
        status: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        apply_count: z.ZodOptional<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    }, {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"BuffConversion">;
        /** The attribute that is used to calculate the attribute gain. */
        source: z.ZodString;
        /** How much of the source attribute is added to target. */
        percent: z.ZodNumber;
        /** The attribute that gets added to. */
        target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    }, {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"ComboField">;
        field_type: z.ZodEnum<["Air", "Dark", "Fire", "Ice", "Light", "Lightning", "Poison", "Smoke", "Ethereal", "Water"]>;
    }, "strip", z.ZodTypeAny, {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    }, {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"ComboFinisher">;
        finisher_type: z.ZodEnum<["Blast", "Leap", "Projectile", "Whirl"]>;
        percent: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    }, {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Damage">;
        hit_count: z.ZodNumber;
        dmg_multiplier: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    }, {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Distance">;
        distance: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Distance";
        distance: number;
    }, {
        type: "Distance";
        distance: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"NoData">;
    }, "strip", z.ZodTypeAny, {
        type: "NoData";
    }, {
        type: "NoData";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Number">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "Number";
    }, {
        value: number;
        type: "Number";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Percent">;
        percent: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Percent";
        percent: number;
    }, {
        type: "Percent";
        percent: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"PrefixedBuff">;
        status: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        apply_count: z.ZodNumber;
        duration: z.ZodNumber;
        prefix: z.ZodObject<{
            text: z.ZodString;
            icon: z.ZodString;
            status: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        }, {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    }, {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Radius">;
        distance: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Radius";
        distance: number;
    }, {
        type: "Radius";
        distance: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Range">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "Range";
    }, {
        value: number;
        type: "Range";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Recharge">;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "Recharge";
    }, {
        value: number;
        type: "Recharge";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"StunBreak">;
        value: z.ZodLiteral<true>;
    }, "strip", z.ZodTypeAny, {
        value: true;
        type: "StunBreak";
    }, {
        value: true;
        type: "StunBreak";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Time">;
        duration: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "Time";
        duration: number;
    }, {
        type: "Time";
        duration: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"Unblockable">;
        value: z.ZodLiteral<true>;
    }, "strip", z.ZodTypeAny, {
        value: true;
        type: "Unblockable";
    }, {
        value: true;
        type: "Unblockable";
    }>, z.ZodObject<{
        type: z.ZodUndefined;
        /** Cost per cast. Life Force ONLY. */
        percent: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type?: undefined;
        percent?: number | undefined;
    }, {
        type?: undefined;
        percent?: number | undefined;
    }>]>>, z.ZodObject<{
        /** Specifies which trait has to be selected in order for this fact to take effect. */
        requires_trait: z.ZodNumber;
        /** This specifies the array index of the facts object it will override, if the trait specified in requires_trait is selected.
         * If this field is omitted, then the fact contained within this object is to be appended to the existing facts array. */
        overrides: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        requires_trait: number;
        overrides?: number | undefined;
    }, {
        requires_trait: number;
        overrides?: number | undefined;
    }>>, "many">>;
    /** A list of skills which may be triggered by the trait. */
    skills: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** The ID of the skill. */
        id: z.ZodNumber;
        /** The name of the skill. */
        name: z.ZodString;
        /** The description of the skill. */
        description: z.ZodString;
        /** The URL for the icon of the skill. */
        icon: z.ZodString;
        /** A list of tooltip facts associated with the skill. */
        facts: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodObject<{
            /** An arbitrary localized string describing the fact.*/
            text: z.ZodOptional<z.ZodString>;
            /** A URL to the icon shown with the fact. Not included with all facts.*/
            icon: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            icon?: string | undefined;
            text?: string | undefined;
        }, {
            icon?: string | undefined;
            text?: string | undefined;
        }>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"AttributeAdjust">;
            value: z.ZodNumber;
            target: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "AttributeAdjust";
            target: string;
        }, {
            value: number;
            type: "AttributeAdjust";
            target: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Buff">;
            status: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            apply_count: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        }, {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"BuffConversion">;
            /** The attribute that is used to calculate the attribute gain. */
            source: z.ZodString;
            /** How much of the source attribute is added to target. */
            percent: z.ZodNumber;
            /** The attribute that gets added to. */
            target: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        }, {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"ComboField">;
            field_type: z.ZodEnum<["Air", "Dark", "Fire", "Ice", "Light", "Lightning", "Poison", "Smoke", "Ethereal", "Water"]>;
        }, "strip", z.ZodTypeAny, {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        }, {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"ComboFinisher">;
            finisher_type: z.ZodEnum<["Blast", "Leap", "Projectile", "Whirl"]>;
            percent: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        }, {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Damage">;
            hit_count: z.ZodNumber;
            dmg_multiplier: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        }, {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Distance">;
            distance: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Distance";
            distance: number;
        }, {
            type: "Distance";
            distance: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"NoData">;
        }, "strip", z.ZodTypeAny, {
            type: "NoData";
        }, {
            type: "NoData";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Number">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "Number";
        }, {
            value: number;
            type: "Number";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Percent">;
            percent: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Percent";
            percent: number;
        }, {
            type: "Percent";
            percent: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"PrefixedBuff">;
            status: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            apply_count: z.ZodNumber;
            duration: z.ZodNumber;
            prefix: z.ZodObject<{
                text: z.ZodString;
                icon: z.ZodString;
                status: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            }, {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        }, {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Radius">;
            distance: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Radius";
            distance: number;
        }, {
            type: "Radius";
            distance: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Range">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "Range";
        }, {
            value: number;
            type: "Range";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Recharge">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "Recharge";
        }, {
            value: number;
            type: "Recharge";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"StunBreak">;
            value: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            value: true;
            type: "StunBreak";
        }, {
            value: true;
            type: "StunBreak";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Time">;
            duration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Time";
            duration: number;
        }, {
            type: "Time";
            duration: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Unblockable">;
            value: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            value: true;
            type: "Unblockable";
        }, {
            value: true;
            type: "Unblockable";
        }>, z.ZodObject<{
            type: z.ZodUndefined;
            /** Cost per cast. Life Force ONLY. */
            percent: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type?: undefined;
            percent?: number | undefined;
        }, {
            type?: undefined;
            percent?: number | undefined;
        }>]>>, "many">>;
        /** A list of additions or changes to tooltip facts where there is interplay between traits. */
        traited_facts: z.ZodOptional<z.ZodArray<z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            /** An arbitrary localized string describing the fact.*/
            text: z.ZodOptional<z.ZodString>;
            /** A URL to the icon shown with the fact. Not included with all facts.*/
            icon: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            icon?: string | undefined;
            text?: string | undefined;
        }, {
            icon?: string | undefined;
            text?: string | undefined;
        }>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"AttributeAdjust">;
            value: z.ZodNumber;
            target: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "AttributeAdjust";
            target: string;
        }, {
            value: number;
            type: "AttributeAdjust";
            target: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Buff">;
            status: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            apply_count: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        }, {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"BuffConversion">;
            /** The attribute that is used to calculate the attribute gain. */
            source: z.ZodString;
            /** How much of the source attribute is added to target. */
            percent: z.ZodNumber;
            /** The attribute that gets added to. */
            target: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        }, {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"ComboField">;
            field_type: z.ZodEnum<["Air", "Dark", "Fire", "Ice", "Light", "Lightning", "Poison", "Smoke", "Ethereal", "Water"]>;
        }, "strip", z.ZodTypeAny, {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        }, {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"ComboFinisher">;
            finisher_type: z.ZodEnum<["Blast", "Leap", "Projectile", "Whirl"]>;
            percent: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        }, {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Damage">;
            hit_count: z.ZodNumber;
            dmg_multiplier: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        }, {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Distance">;
            distance: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Distance";
            distance: number;
        }, {
            type: "Distance";
            distance: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"NoData">;
        }, "strip", z.ZodTypeAny, {
            type: "NoData";
        }, {
            type: "NoData";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Number">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "Number";
        }, {
            value: number;
            type: "Number";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Percent">;
            percent: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Percent";
            percent: number;
        }, {
            type: "Percent";
            percent: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"PrefixedBuff">;
            status: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            apply_count: z.ZodNumber;
            duration: z.ZodNumber;
            prefix: z.ZodObject<{
                text: z.ZodString;
                icon: z.ZodString;
                status: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            }, {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        }, {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Radius">;
            distance: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Radius";
            distance: number;
        }, {
            type: "Radius";
            distance: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Range">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "Range";
        }, {
            value: number;
            type: "Range";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Recharge">;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "Recharge";
        }, {
            value: number;
            type: "Recharge";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"StunBreak">;
            value: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            value: true;
            type: "StunBreak";
        }, {
            value: true;
            type: "StunBreak";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Time">;
            duration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "Time";
            duration: number;
        }, {
            type: "Time";
            duration: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"Unblockable">;
            value: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            value: true;
            type: "Unblockable";
        }, {
            value: true;
            type: "Unblockable";
        }>, z.ZodObject<{
            type: z.ZodUndefined;
            /** Cost per cast. Life Force ONLY. */
            percent: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type?: undefined;
            percent?: number | undefined;
        }, {
            type?: undefined;
            percent?: number | undefined;
        }>]>>, z.ZodObject<{
            /** Specifies which trait has to be selected in order for this fact to take effect. */
            requires_trait: z.ZodNumber;
            /** This specifies the array index of the facts object it will override, if the trait specified in requires_trait is selected.
             * If this field is omitted, then the fact contained within this object is to be appended to the existing facts array. */
            overrides: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            requires_trait: number;
            overrides?: number | undefined;
        }, {
            requires_trait: number;
            overrides?: number | undefined;
        }>>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        name: string;
        description: string;
        icon: string;
        facts?: ({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        }))[] | undefined;
        traited_facts?: (({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        })) & {
            requires_trait: number;
            overrides?: number | undefined;
        })[] | undefined;
    }, {
        id: number;
        name: string;
        description: string;
        icon: string;
        facts?: ({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        }))[] | undefined;
        traited_facts?: (({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        })) & {
            requires_trait: number;
            overrides?: number | undefined;
        })[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    icon: string;
    slot: "Major" | "Minor";
    specialization: number;
    tier: number;
    skills?: {
        id: number;
        name: string;
        description: string;
        icon: string;
        facts?: ({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        }))[] | undefined;
        traited_facts?: (({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        })) & {
            requires_trait: number;
            overrides?: number | undefined;
        })[] | undefined;
    }[] | undefined;
    description?: string | undefined;
    order?: number | undefined;
    facts?: ({
        icon?: string | undefined;
        text?: string | undefined;
    } & ({
        value: number;
        type: "AttributeAdjust";
        target: string;
    } | {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    } | {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    } | {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    } | {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    } | {
        type: "Distance";
        distance: number;
    } | {
        type: "NoData";
    } | {
        value: number;
        type: "Number";
    } | {
        type: "Percent";
        percent: number;
    } | {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    } | {
        type: "Radius";
        distance: number;
    } | {
        value: number;
        type: "Range";
    } | {
        value: number;
        type: "Recharge";
    } | {
        value: true;
        type: "StunBreak";
    } | {
        type: "Time";
        duration: number;
    } | {
        value: true;
        type: "Unblockable";
    } | {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    } | {
        type?: undefined;
        percent?: number | undefined;
    }))[] | undefined;
    traited_facts?: (({
        icon?: string | undefined;
        text?: string | undefined;
    } & ({
        value: number;
        type: "AttributeAdjust";
        target: string;
    } | {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    } | {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    } | {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    } | {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    } | {
        type: "Distance";
        distance: number;
    } | {
        type: "NoData";
    } | {
        value: number;
        type: "Number";
    } | {
        type: "Percent";
        percent: number;
    } | {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    } | {
        type: "Radius";
        distance: number;
    } | {
        value: number;
        type: "Range";
    } | {
        value: number;
        type: "Recharge";
    } | {
        value: true;
        type: "StunBreak";
    } | {
        type: "Time";
        duration: number;
    } | {
        value: true;
        type: "Unblockable";
    } | {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    } | {
        type?: undefined;
        percent?: number | undefined;
    })) & {
        requires_trait: number;
        overrides?: number | undefined;
    })[] | undefined;
}, {
    id: number;
    name: string;
    icon: string;
    slot: "Major" | "Minor";
    specialization: number;
    tier: number;
    skills?: {
        id: number;
        name: string;
        description: string;
        icon: string;
        facts?: ({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        }))[] | undefined;
        traited_facts?: (({
            icon?: string | undefined;
            text?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        } | {
            type: "BuffConversion";
            source: string;
            target: string;
            percent: number;
        } | {
            type?: undefined;
            percent?: number | undefined;
        })) & {
            requires_trait: number;
            overrides?: number | undefined;
        })[] | undefined;
    }[] | undefined;
    description?: string | undefined;
    order?: number | undefined;
    facts?: ({
        icon?: string | undefined;
        text?: string | undefined;
    } & ({
        value: number;
        type: "AttributeAdjust";
        target: string;
    } | {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    } | {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    } | {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    } | {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    } | {
        type: "Distance";
        distance: number;
    } | {
        type: "NoData";
    } | {
        value: number;
        type: "Number";
    } | {
        type: "Percent";
        percent: number;
    } | {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    } | {
        type: "Radius";
        distance: number;
    } | {
        value: number;
        type: "Range";
    } | {
        value: number;
        type: "Recharge";
    } | {
        value: true;
        type: "StunBreak";
    } | {
        type: "Time";
        duration: number;
    } | {
        value: true;
        type: "Unblockable";
    } | {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    } | {
        type?: undefined;
        percent?: number | undefined;
    }))[] | undefined;
    traited_facts?: (({
        icon?: string | undefined;
        text?: string | undefined;
    } & ({
        value: number;
        type: "AttributeAdjust";
        target: string;
    } | {
        status: string;
        type: "Buff";
        description?: string | undefined;
        apply_count?: number | undefined;
        duration?: number | undefined;
    } | {
        type: "ComboField";
        field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
    } | {
        type: "ComboFinisher";
        finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
        percent: number;
    } | {
        type: "Damage";
        hit_count: number;
        dmg_multiplier: number;
    } | {
        type: "Distance";
        distance: number;
    } | {
        type: "NoData";
    } | {
        value: number;
        type: "Number";
    } | {
        type: "Percent";
        percent: number;
    } | {
        type: "PrefixedBuff";
        apply_count: number;
        duration: number;
        prefix: {
            icon: string;
            text: string;
            status?: string | undefined;
            description?: string | undefined;
        };
        status?: string | undefined;
        description?: string | undefined;
    } | {
        type: "Radius";
        distance: number;
    } | {
        value: number;
        type: "Range";
    } | {
        value: number;
        type: "Recharge";
    } | {
        value: true;
        type: "StunBreak";
    } | {
        type: "Time";
        duration: number;
    } | {
        value: true;
        type: "Unblockable";
    } | {
        type: "BuffConversion";
        source: string;
        target: string;
        percent: number;
    } | {
        type?: undefined;
        percent?: number | undefined;
    })) & {
        requires_trait: number;
        overrides?: number | undefined;
    })[] | undefined;
}>, "many">;

/**
 * /v2/worlds definition
 */
declare const WorldsDTO: z.ZodArray<z.ZodObject<{
    /** The world id.
     * The first digit of the id indicates the world's region. 1 is North America, 2 is Europe.
     * The second digit of the id currently correlates with the world's assigned language: 1 means French, 2 means German, and 3 means Spanish. */
    id: z.ZodNumber;
    /** The world name. */
    name: z.ZodString;
    /** The world population level. */
    population: z.ZodEnum<["Low", "Medium", "High", "VeryHigh", "Full"]>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    population: "Medium" | "Low" | "High" | "VeryHigh" | "Full";
}, {
    id: number;
    name: string;
    population: "Medium" | "Low" | "High" | "VeryHigh" | "Full";
}>, "many">;

/**
 * /v2/mounts/skins definition.
 */
declare const MountsSkinsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the mount skin. */
    id: z.ZodNumber;
    /** The name of the mount as it appears in-game. */
    name: z.ZodString;
    /** The full icon URL. */
    icon: z.ZodString;
    /** The mount type id for the given mount skin. Can be resolved against /v2/mounts/types */
    mount: z.ZodString;
    /** Each object contains a key-value pair for the dye. */
    dye_slots: z.ZodArray<z.ZodObject<{
        /** Color id. Can be resolved against /v2/colors. */
        color_id: z.ZodNumber;
        /** Material description. */
        material: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        color_id: number;
        material: string;
    }, {
        color_id: number;
        material: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    icon: string;
    dye_slots: {
        color_id: number;
        material: string;
    }[];
    mount: string;
}, {
    id: number;
    name: string;
    icon: string;
    dye_slots: {
        color_id: number;
        material: string;
    }[];
    mount: string;
}>, "many">;

/**
 * /v2/mounts/types definition.
 */
declare const MountsTypesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the mount. */
    id: z.ZodString;
    /** The name of the mount type as it appears in-game. */
    name: z.ZodString;
    /** The mount skin a mount has when first obtained. Can be resolved against /v2/mounts/skins. */
    default_skin: z.ZodNumber;
    /** An array of mount skin ids. Can be resolved against /v2/mounts/skins. */
    skins: z.ZodArray<z.ZodNumber, "many">;
    /** Each object contains a key-value pair for the skill id and weapon slot. Can be resolved against /v2/skills. */
    skills: z.ZodArray<z.ZodObject<{
        /** The skill id. */
        id: z.ZodNumber;
        /** The skill slot. */
        slot: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        slot: string;
    }, {
        id: number;
        slot: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    skins: number[];
    skills: {
        id: number;
        slot: string;
    }[];
    id: string;
    name: string;
    default_skin: number;
}, {
    skins: number[];
    skills: {
        id: number;
        slot: string;
    }[];
    id: string;
    name: string;
    default_skin: number;
}>, "many">;

/**
 * /v2/pvp/amulets definition.
 */
declare const PvPAmuletsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the amulet. */
    id: z.ZodNumber;
    /** The name of the amulet. */
    name: z.ZodString;
    /** The icon uri for the amulet. */
    icon: z.ZodString;
    /** The list of stats provided by this PvP amulet. */
    attributes: z.ZodObject<{
        AgonyResistance: z.ZodOptional<z.ZodNumber>;
        BoonDuration: z.ZodOptional<z.ZodNumber>;
        ConditionDamage: z.ZodOptional<z.ZodNumber>;
        ConditionDuration: z.ZodOptional<z.ZodNumber>;
        CritDamage: z.ZodOptional<z.ZodNumber>;
        Healing: z.ZodOptional<z.ZodNumber>;
        Power: z.ZodOptional<z.ZodNumber>;
        Precision: z.ZodOptional<z.ZodNumber>;
        Toughness: z.ZodOptional<z.ZodNumber>;
        Vitality: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        AgonyResistance?: number | undefined;
        BoonDuration?: number | undefined;
        ConditionDamage?: number | undefined;
        ConditionDuration?: number | undefined;
        CritDamage?: number | undefined;
        Healing?: number | undefined;
        Power?: number | undefined;
        Precision?: number | undefined;
        Toughness?: number | undefined;
        Vitality?: number | undefined;
    }, {
        AgonyResistance?: number | undefined;
        BoonDuration?: number | undefined;
        ConditionDamage?: number | undefined;
        ConditionDuration?: number | undefined;
        CritDamage?: number | undefined;
        Healing?: number | undefined;
        Power?: number | undefined;
        Precision?: number | undefined;
        Toughness?: number | undefined;
        Vitality?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    attributes: {
        AgonyResistance?: number | undefined;
        BoonDuration?: number | undefined;
        ConditionDamage?: number | undefined;
        ConditionDuration?: number | undefined;
        CritDamage?: number | undefined;
        Healing?: number | undefined;
        Power?: number | undefined;
        Precision?: number | undefined;
        Toughness?: number | undefined;
        Vitality?: number | undefined;
    };
    icon: string;
}, {
    id: number;
    name: string;
    attributes: {
        AgonyResistance?: number | undefined;
        BoonDuration?: number | undefined;
        ConditionDamage?: number | undefined;
        ConditionDuration?: number | undefined;
        CritDamage?: number | undefined;
        Healing?: number | undefined;
        Power?: number | undefined;
        Precision?: number | undefined;
        Toughness?: number | undefined;
        Vitality?: number | undefined;
    };
    icon: string;
}>, "many">;

/**
 * /v2/pvp/games definition.
 */
declare const PvPGamesDTO: z.ZodArray<z.ZodObject<{
    /** The game's UUID. */
    id: z.ZodString;
    /** The map the match was played on, cross-referenced from /v2/maps. */
    map_id: z.ZodNumber;
    /** A timestamp of when the match started. */
    started: z.ZodString;
    /** A timestamp of when the match ended. */
    ended: z.ZodString;
    /** The result of the match. */
    result: z.ZodString;
    /** The team the player was on during the match. */
    team: z.ZodString;
    /** The profession the player was playing during the match. */
    profession: z.ZodString;
    /** The ending scores for each team. */
    scores: z.ZodObject<{
        /** Red team. */
        red: z.ZodNumber;
        /** Blue team. */
        blue: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        red: number;
        blue: number;
    }, {
        red: number;
        blue: number;
    }>;
    /** The type of game mode played. */
    rating_type: z.ZodEnum<["Ranked", "Unranked", "None"]>;
    /** Change in rating as a result of the observed game. Note that number can be negative in the case of a loss. */
    rating_change: z.ZodOptional<z.ZodNumber>;
    /** Season id. Can be resolved against /v2/pvp/season. */
    season: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    profession: string;
    map_id: number;
    started: string;
    ended: string;
    team: string;
    scores: {
        red: number;
        blue: number;
    };
    rating_type: "Ranked" | "Unranked" | "None";
    result: string;
    rating_change?: number | undefined;
    season?: string | undefined;
}, {
    id: string;
    profession: string;
    map_id: number;
    started: string;
    ended: string;
    team: string;
    scores: {
        red: number;
        blue: number;
    };
    rating_type: "Ranked" | "Unranked" | "None";
    result: string;
    rating_change?: number | undefined;
    season?: string | undefined;
}>, "many">;

/**
 * /v2/pvp/heroes definition.
 */
declare const PvPHeroesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the pvp heroes. */
    id: z.ZodString;
    /** The name of the pvp heroes. */
    name: z.ZodString;
    /** The flavor type describing the hero. */
    type: z.ZodString;
    /** An object reflecting the champions stats under offense, defense, or speed. */
    stats: z.ZodObject<{
        /** Offense. */
        offense: z.ZodNumber;
        /** Defense. */
        defense: z.ZodNumber;
        /** Speed. */
        speed: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        defense: number;
        offense: number;
        speed: number;
    }, {
        defense: number;
        offense: number;
        speed: number;
    }>;
    /** The overlay art url for that champion. */
    overlay: z.ZodString;
    /** The underlay art url for that champion. */
    underlay: z.ZodString;
    /** The pvp hero skin. */
    skins: z.ZodArray<z.ZodObject<{
        /** The skin id. */
        id: z.ZodNumber;
        /** The name of the skin. */
        name: z.ZodString;
        /** The icon url for the skin. */
        icon: z.ZodString;
        /** States if the skin is the default champion skin. */
        default: z.ZodBoolean;
        /** Item ids which unlock the skin. Can be resolved against /v2/items. */
        unlock_items: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        name: string;
        icon: string;
        unlock_items: number[];
        default: boolean;
    }, {
        id: number;
        name: string;
        icon: string;
        unlock_items: number[];
        default: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    skins: {
        id: number;
        name: string;
        icon: string;
        unlock_items: number[];
        default: boolean;
    }[];
    stats: {
        defense: number;
        offense: number;
        speed: number;
    };
    id: string;
    name: string;
    type: string;
    overlay: string;
    underlay: string;
}, {
    skins: {
        id: number;
        name: string;
        icon: string;
        unlock_items: number[];
        default: boolean;
    }[];
    stats: {
        defense: number;
        offense: number;
        speed: number;
    };
    id: string;
    name: string;
    type: string;
    overlay: string;
    underlay: string;
}>, "many">;

/**
 * /v2/pvp/ranks definition.
 */
declare const PvPRanksDTO: z.ZodArray<z.ZodObject<{
    /** The id of the pvp rank. */
    id: z.ZodNumber;
    /** The id of the unlocked finisher, can be resolved against /v2/finishers */
    finisher_id: z.ZodNumber;
    /** The given name for the PvP rank. */
    name: z.ZodString;
    /** The icon uri for the Pvp rank. */
    icon: z.ZodString;
    /** The minimum PvP level required to be at this rank. */
    min_rank: z.ZodNumber;
    /** The maximum PvP level required to be at this rank. */
    max_rank: z.ZodNumber;
    /** The rank levels. */
    levels: z.ZodArray<z.ZodObject<{
        /** The minimum PvP level required to be at this rank. */
        min_rank: z.ZodNumber;
        /** The maximum PvP level required to be at this rank. */
        max_rank: z.ZodNumber;
        /** The amount of PvP experience needed to go from the given minimum rank to maximum rank. */
        points: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        min_rank: number;
        max_rank: number;
        points: number;
    }, {
        min_rank: number;
        max_rank: number;
        points: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    icon: string;
    levels: {
        min_rank: number;
        max_rank: number;
        points: number;
    }[];
    finisher_id: number;
    min_rank: number;
    max_rank: number;
}, {
    id: number;
    name: string;
    icon: string;
    levels: {
        min_rank: number;
        max_rank: number;
        points: number;
    }[];
    finisher_id: number;
    min_rank: number;
    max_rank: number;
}>, "many">;

/**
 * /v2/pvp/seasons definition.
 */
declare const PvPSeasonDTO: z.ZodArray<z.ZodObject<{
    /** The season's UUID. */
    id: z.ZodString;
    /** The season's name. */
    name: z.ZodString;
    /** ISO timestamp for season start. */
    start: z.ZodString;
    /** ISO timestamp for season end. */
    end: z.ZodString;
    /** Whether the season is currently active. */
    active: z.ZodBoolean;
    /** A list of divisions. */
    divisions: z.ZodArray<z.ZodObject<{
        /** The division's name. */
        name: z.ZodString;
        /** Flags applying to the division. */
        flags: z.ZodArray<z.ZodEnum<["CanLosePoints", "CanLoseTiers", "Repeatable"]>, "many">;
        /** Path to the large icon. */
        large_icon: z.ZodString;
        /** Path to the small icon. */
        small_icon: z.ZodString;
        /** Path to the pip icon. */
        pip_icon: z.ZodString;
        /** A list of tiers. */
        tiers: z.ZodArray<z.ZodObject<{
            /** The number of pipes contained in each tier. */
            points: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            points: number;
        }, {
            points: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        flags: ("CanLosePoints" | "CanLoseTiers" | "Repeatable")[];
        large_icon: string;
        small_icon: string;
        pip_icon: string;
        tiers: {
            points: number;
        }[];
    }, {
        name: string;
        flags: ("CanLosePoints" | "CanLoseTiers" | "Repeatable")[];
        large_icon: string;
        small_icon: string;
        pip_icon: string;
        tiers: {
            points: number;
        }[];
    }>, "many">;
    /** Contains details about the season's ranks */
    ranks: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** The rank's name. */
        name: z.ZodString;
        /** The rank's description. */
        description: z.ZodString;
        /** The full icon URL. */
        icon: z.ZodString;
        /** The full URL for the rank's overlay icon. */
        overlay: z.ZodString;
        /** The full URL for a small variant of the rank's overlay icon. */
        overlay_small: z.ZodString;
        /** The tiers of the rank. */
        tiers: z.ZodArray<z.ZodObject<{
            /** The minimum PvP rating required for the tier. */
            rating: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            rating: number;
        }, {
            rating: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        icon: string;
        overlay: string;
        tiers: {
            rating: number;
        }[];
        overlay_small: string;
    }, {
        name: string;
        description: string;
        icon: string;
        overlay: string;
        tiers: {
            rating: number;
        }[];
        overlay_small: string;
    }>, "many">>;
    /** Contains details on the current leaderboards. */
    leaderboards: z.ZodObject<{
        /** The leaderboard ladder. */
        ladder: z.ZodOptional<z.ZodObject<{
            /** The ladder settings. */
            settings: z.ZodObject<{
                /** Setting name. NOTE: Broken, always empty. */
                name: z.ZodString;
                /** Duration setting. NOTE: Broken, always null. Supposed to be a number. */
                duration: z.ZodNull;
                /** Indicates the primary scoring component. */
                scoring: z.ZodString;
                /** The ladder tiers. */
                tiers: z.ZodArray<z.ZodObject<{
                    /** Two numbers, a maximum, followed by minimum. */
                    range: z.ZodArray<z.ZodNumber, "many">;
                }, "strip", z.ZodTypeAny, {
                    range: number[];
                }, {
                    range: number[];
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            }, {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            }>;
            /** Array used as reference to select player/guild scoring method. */
            scorings: z.ZodArray<z.ZodObject<{
                /** The id for this scoring method, used as a reference in other endpoints. */
                id: z.ZodString;
                /** Which variable type the content is saved as. */
                type: z.ZodString;
                /** Description of the scoring method (if any). */
                description: z.ZodString;
                /** Should represent the scoring method, such as "wins", "losses", and "skill rating". */
                name: z.ZodString;
                /** Will describe how the scoring is ordered. */
                ordering: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }, {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            settings: {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            };
            scorings: {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }[];
        }, {
            settings: {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            };
            scorings: {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        ladder?: {
            settings: {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            };
            scorings: {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }[];
        } | undefined;
    }, {
        ladder?: {
            settings: {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            };
            scorings: {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }[];
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    leaderboards: {
        ladder?: {
            settings: {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            };
            scorings: {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }[];
        } | undefined;
    };
    id: string;
    name: string;
    active: boolean;
    start: string;
    end: string;
    divisions: {
        name: string;
        flags: ("CanLosePoints" | "CanLoseTiers" | "Repeatable")[];
        large_icon: string;
        small_icon: string;
        pip_icon: string;
        tiers: {
            points: number;
        }[];
    }[];
    ranks?: {
        name: string;
        description: string;
        icon: string;
        overlay: string;
        tiers: {
            rating: number;
        }[];
        overlay_small: string;
    }[] | undefined;
}, {
    leaderboards: {
        ladder?: {
            settings: {
                name: string;
                duration: null;
                tiers: {
                    range: number[];
                }[];
                scoring: string;
            };
            scorings: {
                id: string;
                name: string;
                type: string;
                description: string;
                ordering: string;
            }[];
        } | undefined;
    };
    id: string;
    name: string;
    active: boolean;
    start: string;
    end: string;
    divisions: {
        name: string;
        flags: ("CanLosePoints" | "CanLoseTiers" | "Repeatable")[];
        large_icon: string;
        small_icon: string;
        pip_icon: string;
        tiers: {
            points: number;
        }[];
    }[];
    ranks?: {
        name: string;
        description: string;
        icon: string;
        overlay: string;
        tiers: {
            rating: number;
        }[];
        overlay_small: string;
    }[] | undefined;
}>, "many">;

/**
 * /v2/pvp/seasons/:id/leaderboards definition.
 */
declare const PvPSeasonLeaderboardsDTO: z.ZodArray<z.ZodObject<{
    /** Account name. */
    name: z.ZodString;
    /** Rank for the given player/guild. */
    rank: z.ZodNumber;
    /** Guild id. NOTE: Almost never present. */
    id: z.ZodOptional<z.ZodString>;
    /** (only for guild leaderboard) Name of the team. */
    team: z.ZodOptional<z.ZodString>;
    /** (only for guild leaderboard) Internal team id. */
    team_id: z.ZodOptional<z.ZodNumber>;
    /** Date at which the rank is reached. */
    date: z.ZodString;
    /** Array of objects containing the id and values for scorings. */
    scores: z.ZodArray<z.ZodObject<{
        /** Id for the scoring parameter. Can be compared to the values obtained from /v2/pvp/seasons/:id in the scorings array. */
        id: z.ZodString;
        /** Value for the given id. */
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        value: number;
    }, {
        id: string;
        value: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    date: string;
    rank: number;
    scores: {
        id: string;
        value: number;
    }[];
    id?: string | undefined;
    team?: string | undefined;
    team_id?: number | undefined;
}, {
    name: string;
    date: string;
    rank: number;
    scores: {
        id: string;
        value: number;
    }[];
    id?: string | undefined;
    team?: string | undefined;
    team_id?: number | undefined;
}>, "many">;
declare const PvPSeasonLeaderboardRegionsDTO: z.ZodArray<z.ZodString, "many">;

/**
 * /v2/stories definition
 */
declare const StoriesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the story. */
    id: z.ZodNumber;
    /**
     * The id for the story season.
     * Can be resolved against /v2/stories/seasons.
     */
    season: z.ZodString;
    /** The name of the story. */
    name: z.ZodString;
    /** The description of the story. */
    description: z.ZodString;
    /** The (in-game, not real-world) date of the story. */
    timeline: z.ZodString;
    /** The minimum level required for a character to begin this story. */
    level: z.ZodNumber;
    /** The order in which this story is displayed in the Story Journal. */
    order: z.ZodNumber;
    /** An array of chapter objects providing details about the chapters for this story. */
    chapters: z.ZodArray<z.ZodObject<{
        /** The name of the chapter. */
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, "many">;
    /** When present, provides a list of races that are eligible to participate in this story. */
    races: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** When present, provides a list of additional requirements for a character to participate in this story. */
    flags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    level: number;
    description: string;
    order: number;
    season: string;
    timeline: string;
    chapters: {
        name: string;
    }[];
    races?: string[] | undefined;
    flags?: string[] | undefined;
}, {
    id: number;
    name: string;
    level: number;
    description: string;
    order: number;
    season: string;
    timeline: string;
    chapters: {
        name: string;
    }[];
    races?: string[] | undefined;
    flags?: string[] | undefined;
}>, "many">;

/**
 * /v2/stories/seasons definition
 */
declare const StoriesSeasonsDTO: z.ZodArray<z.ZodObject<{
    /** The id of the season. */
    id: z.ZodString;
    /** The name of the season. */
    name: z.ZodString;
    /** The order in which this season is displayed in the Story Journal. */
    order: z.ZodNumber;
    /** An array of story ids for the stories that belong to this season. */
    stories: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    stories: number[];
    id: string;
    name: string;
    order: number;
}, {
    stories: number[];
    id: string;
    name: string;
    order: number;
}>, "many">;

/**
 * /v2/wizardsvault/listings definition
 */
declare const WizardsVaultListingsDTO: z.ZodArray<z.ZodObject<{
    /** The listing id. */
    id: z.ZodNumber;
    /** The id of the item */
    item_id: z.ZodNumber;
    /** The quantity of the item the user receives */
    item_count: z.ZodNumber;
    /** Appears to be the position in the wizards vault UI. */
    type: z.ZodEnum<["Featured", "Normal", "Legacy"]>;
    /** The quantity of Astral Acclaim to purchase . */
    cost: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: number;
    type: "Featured" | "Normal" | "Legacy";
    item_id: number;
    item_count: number;
    cost: number;
}, {
    id: number;
    type: "Featured" | "Normal" | "Legacy";
    item_id: number;
    item_count: number;
    cost: number;
}>, "many">;

/**
 * /v2/wizardsvault/objectives definition
 */
declare const WizardsVaultObjectivesDTO: z.ZodArray<z.ZodObject<{
    /** The ID of the objective. */
    id: z.ZodNumber;
    /** The title of the objective. */
    title: z.ZodString;
    /** The reward track containing the objective. */
    track: z.ZodEnum<["PvP", "WvW", "PvE"]>;
    /** The amount of astral acclaim awarded. */
    acclaim: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: number;
    title: string;
    track: "PvP" | "WvW" | "PvE";
    acclaim: number;
}, {
    id: number;
    title: string;
    track: "PvP" | "WvW" | "PvE";
    acclaim: number;
}>, "many">;

/**
 * /v2/wvw/abilities definition
 */
declare const WvWAbilitiesDTO: z.ZodArray<z.ZodObject<{
    /** The id of the abilities.*/
    id: z.ZodNumber;
    /** The given name for the WvW ability.*/
    name: z.ZodString;
    /** The given description for the WvW ability.*/
    description: z.ZodString;
    /** The uri for the ability's icon.*/
    icon: z.ZodString;
    /** The WvW ranks.*/
    ranks: z.ZodArray<z.ZodObject<{
        /** The cost in WvW experience points to purchase the ability.*/
        cost: z.ZodNumber;
        /** The effect given to players for obtaining the given ability rank.*/
        effect: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cost: number;
        effect: string;
    }, {
        cost: number;
        effect: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    ranks: {
        cost: number;
        effect: string;
    }[];
    id: number;
    name: string;
    description: string;
    icon: string;
}, {
    ranks: {
        cost: number;
        effect: string;
    }[];
    id: number;
    name: string;
    description: string;
    icon: string;
}>, "many">;

/**
 * /v2/wvw/matches definition
 */
declare const WvWMatchesDTO: z.ZodArray<z.ZodObject<{
    /** The WvW match id. */
    id: z.ZodString;
    /** The starting time of the matchup. (ISO-8601 Standard) */
    start_time: z.ZodString;
    /** The ending time of the matchup. (ISO-8601 Standard) */
    end_time: z.ZodString;
    /** An object containing the score of the three servers. */
    scores: z.ZodObject<{
        /** Score of the red team. */
        red: z.ZodNumber;
        /** Score of the blue team. */
        blue: z.ZodNumber;
        /** Score of the green team. */
        green: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        red: number;
        blue: number;
        green: number;
    }, {
        red: number;
        blue: number;
        green: number;
    }>;
    /** An object containing the IDs of the three primary matchup worlds. */
    worlds: z.ZodObject<{
        /** Score of the red team. */
        red: z.ZodNumber;
        /** Score of the blue team. */
        blue: z.ZodNumber;
        /** Score of the green team. */
        green: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        red: number;
        blue: number;
        green: number;
    }, {
        red: number;
        blue: number;
        green: number;
    }>;
    /** n object containing an array of objects with the world IDs of the three servers. */
    all_worlds: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodNumber, "many">>;
    /** An object containing the total deaths of the three servers. */
    deaths: z.ZodObject<{
        /** Score of the red team. */
        red: z.ZodNumber;
        /** Score of the blue team. */
        blue: z.ZodNumber;
        /** Score of the green team. */
        green: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        red: number;
        blue: number;
        green: number;
    }, {
        red: number;
        blue: number;
        green: number;
    }>;
    /** An object containing the total kills of the three servers. */
    kills: z.ZodObject<{
        /** Score of the red team. */
        red: z.ZodNumber;
        /** Score of the blue team. */
        blue: z.ZodNumber;
        /** Score of the green team. */
        green: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        red: number;
        blue: number;
        green: number;
    }, {
        red: number;
        blue: number;
        green: number;
    }>;
    /** An object containing the victory points of the three server. */
    victory_points: z.ZodObject<{
        /** Score of the red team. */
        red: z.ZodNumber;
        /** Score of the blue team. */
        blue: z.ZodNumber;
        /** Score of the green team. */
        green: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        red: number;
        blue: number;
        green: number;
    }, {
        red: number;
        blue: number;
        green: number;
    }>;
    /** A list of objects containing detailed information about each of the four maps. */
    maps: z.ZodArray<z.ZodObject<{
        /** The map id. */
        id: z.ZodNumber;
        /** The identifier for the map. Can be either RedHome, GreenHome or BlueHome for the borderlands or Center for Eternal Battlegrounds. */
        type: z.ZodString;
        /** An object containing the score of the three servers for only the specified map. */
        scores: z.ZodObject<{
            /** Score of the red team. */
            red: z.ZodNumber;
            /** Score of the blue team. */
            blue: z.ZodNumber;
            /** Score of the green team. */
            green: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            red: number;
            blue: number;
            green: number;
        }, {
            red: number;
            blue: number;
            green: number;
        }>;
        /** An object containing the total kills of the three servers for only the specified map. */
        kills: z.ZodObject<{
            /** Score of the red team. */
            red: z.ZodNumber;
            /** Score of the blue team. */
            blue: z.ZodNumber;
            /** Score of the green team. */
            green: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            red: number;
            blue: number;
            green: number;
        }, {
            red: number;
            blue: number;
            green: number;
        }>;
        /** An object containing the total deaths of the three servers for only the specified map. */
        deaths: z.ZodObject<{
            /** Score of the red team. */
            red: z.ZodNumber;
            /** Score of the blue team. */
            blue: z.ZodNumber;
            /** Score of the green team. */
            green: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            red: number;
            blue: number;
            green: number;
        }, {
            red: number;
            blue: number;
            green: number;
        }>;
        /** A list of objective objects for this map. Each object contains the following properties: */
        objectives: z.ZodArray<z.ZodObject<{
            /** The objective id. */
            id: z.ZodString;
            /** The objective type. */
            type: z.ZodEnum<["Spawn", "Camp", "Ruins", "Tower", "Keep", "Castle", "Mercenary"]>;
            /** The current owner of the objective. */
            owner: z.ZodEnum<["Red", "Green", "Blue", "Neutral"]>;
            /** The time at which this objective was last captured by a server. (ISO-8601 Standard) */
            last_flipped: z.ZodString;
            /** The guild id of the guild currently claiming the objective, or null if not claimed. (Not present for unclaimable objectives.) */
            claimed_by: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            /** The time the objective was claimed by the claimed_by guild (ISO-8601 Standard), or null if not claimed. (Not present for unclaimable objectives.) */
            claimed_at: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            /** The amount of points per tick the given objective yields. */
            points_tick: z.ZodNumber;
            /** The amount of points awarded for capturing the objective. */
            points_capture: z.ZodNumber;
            /** An array of ids. Can be resolved against /v2/guild/upgrades, showing which guild upgrades are currently slotted. */
            guild_upgrades: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            /** The total amount of yak shipments delivered to the objective. Not limited to the shipments within the current tier only. */
            yaks_delivered: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary";
            owner: "Red" | "Green" | "Blue" | "Neutral";
            last_flipped: string;
            points_tick: number;
            points_capture: number;
            claimed_by?: string | null | undefined;
            claimed_at?: string | null | undefined;
            guild_upgrades?: number[] | undefined;
            yaks_delivered?: number | undefined;
        }, {
            id: string;
            type: "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary";
            owner: "Red" | "Green" | "Blue" | "Neutral";
            last_flipped: string;
            points_tick: number;
            points_capture: number;
            claimed_by?: string | null | undefined;
            claimed_at?: string | null | undefined;
            guild_upgrades?: number[] | undefined;
            yaks_delivered?: number | undefined;
        }>, "many">;
        /**
         * A list of all bonuses being granted by this map.
         * If no player team owns a bonus from the map, this list is empty.
         */
        bonuses: z.ZodArray<z.ZodObject<{
            /** A shorthand name for the bonus. */
            type: z.ZodLiteral<"Bloodlust">;
            /** The color representing which world group owns the bloodlust. */
            owner: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "Bloodlust";
            owner: string;
        }, {
            type: "Bloodlust";
            owner: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        objectives: {
            id: string;
            type: "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary";
            owner: "Red" | "Green" | "Blue" | "Neutral";
            last_flipped: string;
            points_tick: number;
            points_capture: number;
            claimed_by?: string | null | undefined;
            claimed_at?: string | null | undefined;
            guild_upgrades?: number[] | undefined;
            yaks_delivered?: number | undefined;
        }[];
        id: number;
        type: string;
        deaths: {
            red: number;
            blue: number;
            green: number;
        };
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        bonuses: {
            type: "Bloodlust";
            owner: string;
        }[];
        kills: {
            red: number;
            blue: number;
            green: number;
        };
    }, {
        objectives: {
            id: string;
            type: "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary";
            owner: "Red" | "Green" | "Blue" | "Neutral";
            last_flipped: string;
            points_tick: number;
            points_capture: number;
            claimed_by?: string | null | undefined;
            claimed_at?: string | null | undefined;
            guild_upgrades?: number[] | undefined;
            yaks_delivered?: number | undefined;
        }[];
        id: number;
        type: string;
        deaths: {
            red: number;
            blue: number;
            green: number;
        };
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        bonuses: {
            type: "Bloodlust";
            owner: string;
        }[];
        kills: {
            red: number;
            blue: number;
            green: number;
        };
    }>, "many">;
    /** A list of skirmishes. */
    skirmishes: z.ZodArray<z.ZodObject<{
        /** The skirmish id . */
        id: z.ZodNumber;
        /** Object containing total scores for each team color. */
        scores: z.ZodObject<{
            /** Score of the red team. */
            red: z.ZodNumber;
            /** Score of the blue team. */
            blue: z.ZodNumber;
            /** Score of the green team. */
            green: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            red: number;
            blue: number;
            green: number;
        }, {
            red: number;
            blue: number;
            green: number;
        }>;
        /** Contains the map specific scores for the specific skirmish. */
        map_scores: z.ZodArray<z.ZodObject<{
            /** Which map is being looked at. */
            type: z.ZodEnum<["Center", "RedHome", "BlueHome", "GreenHome"]>;
            /** Object containing total scores for each team color on the selected map. */
            scores: z.ZodObject<{
                /** Score of the red team. */
                red: z.ZodNumber;
                /** Score of the blue team. */
                blue: z.ZodNumber;
                /** Score of the green team. */
                green: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                red: number;
                blue: number;
                green: number;
            }, {
                red: number;
                blue: number;
                green: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }, {
            type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        map_scores: {
            type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }[];
    }, {
        id: number;
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        map_scores: {
            type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    maps: {
        objectives: {
            id: string;
            type: "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary";
            owner: "Red" | "Green" | "Blue" | "Neutral";
            last_flipped: string;
            points_tick: number;
            points_capture: number;
            claimed_by?: string | null | undefined;
            claimed_at?: string | null | undefined;
            guild_upgrades?: number[] | undefined;
            yaks_delivered?: number | undefined;
        }[];
        id: number;
        type: string;
        deaths: {
            red: number;
            blue: number;
            green: number;
        };
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        bonuses: {
            type: "Bloodlust";
            owner: string;
        }[];
        kills: {
            red: number;
            blue: number;
            green: number;
        };
    }[];
    worlds: {
        red: number;
        blue: number;
        green: number;
    };
    id: string;
    deaths: {
        red: number;
        blue: number;
        green: number;
    };
    scores: {
        red: number;
        blue: number;
        green: number;
    };
    start_time: string;
    end_time: string;
    all_worlds: Record<string, number[]>;
    kills: {
        red: number;
        blue: number;
        green: number;
    };
    victory_points: {
        red: number;
        blue: number;
        green: number;
    };
    skirmishes: {
        id: number;
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        map_scores: {
            type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }[];
    }[];
}, {
    maps: {
        objectives: {
            id: string;
            type: "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary";
            owner: "Red" | "Green" | "Blue" | "Neutral";
            last_flipped: string;
            points_tick: number;
            points_capture: number;
            claimed_by?: string | null | undefined;
            claimed_at?: string | null | undefined;
            guild_upgrades?: number[] | undefined;
            yaks_delivered?: number | undefined;
        }[];
        id: number;
        type: string;
        deaths: {
            red: number;
            blue: number;
            green: number;
        };
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        bonuses: {
            type: "Bloodlust";
            owner: string;
        }[];
        kills: {
            red: number;
            blue: number;
            green: number;
        };
    }[];
    worlds: {
        red: number;
        blue: number;
        green: number;
    };
    id: string;
    deaths: {
        red: number;
        blue: number;
        green: number;
    };
    scores: {
        red: number;
        blue: number;
        green: number;
    };
    start_time: string;
    end_time: string;
    all_worlds: Record<string, number[]>;
    kills: {
        red: number;
        blue: number;
        green: number;
    };
    victory_points: {
        red: number;
        blue: number;
        green: number;
    };
    skirmishes: {
        id: number;
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        map_scores: {
            type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }[];
    }[];
}>, "many">;

/**
 * /v2/wvw/objectives definition
 */
declare const WvWObjectivesDTO: z.ZodArray<z.ZodObject<{
    /** The objective id. */
    id: z.ZodString;
    /** The name of the objective. */
    name: z.ZodString;
    /** The type of the objective. */
    type: z.ZodEnum<["Camp", "Castle", "Keep", "Mercenary", "Tower", "Ruins", "Resource", "Generic", "Spawn"]>;
    /** The map sector the objective can be found in. Refer to /v2/continents. */
    sector_id: z.ZodNumber;
    /** The ID of the map that this objective can be found on. */
    map_id: z.ZodNumber;
    /** The map that this objective can be found on. */
    map_type: z.ZodEnum<["GreenHome", "BlueHome", "RedHome", "Center", "EdgeOfTheMist"]>;
    /** An array of three numbers representing the X, Y and Z coordinates of the objectives marker on the map. */
    coord: z.ZodArray<z.ZodNumber, "many">;
    /** An array of two numbers representing the X and Y coordinates of the sector centroid. */
    label_coord: z.ZodArray<z.ZodNumber, "many">;
    /** The icon link. */
    marker: z.ZodString;
    /** The chat code for the observed objective. */
    chat_link: z.ZodString;
    /** The upgrade id. Can be resolved against /v2/wvw/upgrades. */
    upgrade_id: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "Generic" | "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary" | "Resource";
    label_coord: number[];
    coord: number[];
    chat_link: string;
    map_id: number;
    sector_id: number;
    map_type: "BlueHome" | "Center" | "GreenHome" | "RedHome" | "EdgeOfTheMist";
    marker: string;
    upgrade_id?: number | undefined;
}, {
    id: string;
    name: string;
    type: "Generic" | "Spawn" | "Camp" | "Ruins" | "Tower" | "Keep" | "Castle" | "Mercenary" | "Resource";
    label_coord: number[];
    coord: number[];
    chat_link: string;
    map_id: number;
    sector_id: number;
    map_type: "BlueHome" | "Center" | "GreenHome" | "RedHome" | "EdgeOfTheMist";
    marker: string;
    upgrade_id?: number | undefined;
}>, "many">;

/**
 * /v2/wvw/ranks definition
 */
declare const WvWRanksDTO: z.ZodArray<z.ZodObject<{
    /** The id of the rank. */
    id: z.ZodNumber;
    /** The given title for the WvW rank. */
    title: z.ZodString;
    /** The minimum WvW level required to be at this rank. */
    min_rank: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: number;
    title: string;
    min_rank: number;
}, {
    id: number;
    title: string;
    min_rank: number;
}>, "many">;

/**
 * /v2/wvw/upgrades definition.
 */
declare const WvWUpgradesDTO: z.ZodArray<z.ZodObject<{
    /** The upgrade id. */
    id: z.ZodNumber;
    /** The upgrade tiers. */
    tiers: z.ZodArray<z.ZodObject<{
        /** The name of the upgrade tier. */
        name: z.ZodString;
        /** The number of required yaks. */
        yaks_required: z.ZodNumber;
        /** The upgrades in each tier. */
        upgrades: z.ZodArray<z.ZodObject<{
            /** The name of the upgrade tier. */
            name: z.ZodString;
            /** The given description for this upgrade. */
            description: z.ZodString;
            /** The url/image link for the upgrade's icon. */
            icon: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            icon: string;
        }, {
            name: string;
            description: string;
            icon: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        upgrades: {
            name: string;
            description: string;
            icon: string;
        }[];
        name: string;
        yaks_required: number;
    }, {
        upgrades: {
            name: string;
            description: string;
            icon: string;
        }[];
        name: string;
        yaks_required: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    tiers: {
        upgrades: {
            name: string;
            description: string;
            icon: string;
        }[];
        name: string;
        yaks_required: number;
    }[];
}, {
    id: number;
    tiers: {
        upgrades: {
            name: string;
            description: string;
            icon: string;
        }[];
        name: string;
        yaks_required: number;
    }[];
}>, "many">;

type ApiPermissions = 'account' | 'builds' | 'characters' | 'guilds' | 'inventories' | 'pvp' | 'tradingpost' | 'unlocks' | 'wallet';
type EndpointUrls = '/v2/account' | '/v2/achievements' | '/v2/backstory' | '/v2/build' | '/v2/characters' | '/v2/colors' | '/v2/commerce' | '/v2/continents' | '/v2/createsubtoken' | '/v2/currencies' | '/v2/dailycrafting' | '/v2/dungeons' | '/v2/emblem' | '/v2/emotes' | '/v2/files' | '/v2/finishers' | '/v2/gliders' | '/v2/guild' | '/v2/home/cats' | '/v2/home/nodes' | '/v2/items' | '/v2/itemstats' | '/v2/legendaryarmory' | '/v2/legends' | '/v2/mailcarriers' | '/v2/mapchests' | '/v2/maps' | '/v2/masteries' | '/v2/materials' | '/v2/minis' | '/v2/mounts' | '/v2/novelties' | '/v2/outfits' | '/v2/pets' | '/v2/professions' | '/v2/pvp' | '/v2/quaggans' | '/v2/quests' | '/v2/races' | '/v2/raids' | '/v2/recipes' | '/v2/skills' | '/v2/skins' | '/v2/specializations' | '/v2/stories' | '/v2/titles' | '/v2/tokeninfo' | '/v2/traits' | '/v2/worldbosses' | '/v2/worlds' | '/v2/wvw';
declare const stringArrayType: z.ZodArray<z.ZodString, "many">;
declare const numberArrayType: z.ZodArray<z.ZodNumber, "many">;

/**
 * /v2/achievements api
 */
declare class AchievementsApi extends ApiBase {
    /**
     * Returns all the categories for achievements.
     */
    getCategories(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns all the categories for achievements.
     *
     * @param ids - (optional) List of category ids, or "all".
     */
    getCategories(ids: number[] | 'all'): Promise<z.infer<typeof AchievementCategoriesDTO>>;
    /**
     * Returns all the top-level groups for achievements.
     */
    getGroups(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns all the top-level groups for achievements.
     *
     * @param id - (optional) Group id.
     */
    getGroups(id: string): Promise<z.infer<typeof AchievementGroupsDTO>>;
}

/**
 * /v2/characters Api
 */
declare class CharactersApi extends ApiBase {
    /**
     * Returns information about characters attached to a specific account.
     */
    get(): Promise<string[]>;
    /**
     * Returns information about the backstory of a character attached to a specific account.
     *
     * @param id - Character name
     */
    getBackstory(id: string): Promise<{
        backstory: string[];
    }>;
    /**
     * Returns information about the build template tabs of a character.
     *
     * @param id - Character name
     * @param tabs - Optional tab index. If the index is invalid, all tabs will be returned
     */
    getBuildTabs(id: string, tabs?: number[] | 'all'): Promise<{
        build: {
            skills: {
                heal: number | null;
                elite: number | null;
                utitilies?: (number | null)[] | undefined;
            };
            specializations: {
                traits: (number | null)[];
                id: number | null;
            }[];
            name: string;
            profession: string;
            aquatic_skills: {
                heal: number | null;
                elite: number | null;
                utitilies?: (number | null)[] | undefined;
            };
            legends?: (string | null)[] | undefined;
            pets?: {
                terrestrial: number[];
                aquatic: number[];
            } | undefined;
            aquatic_legends?: (string | null)[] | undefined;
        };
        tab: number;
        is_active: boolean;
    }[]>;
    /**
     * Returns core information about a character attached to a specific account.
     *
     * @param id - Character name
     */
    getCore(id: string): Promise<{
        guild: string | null;
        age: number;
        name: string;
        created: string;
        profession: "Elementalist" | "Engineer" | "Guardian" | "Mesmer" | "Necromancer" | "Ranger" | "Revenant" | "Thief" | "Warrior";
        level: number;
        race: "Asura" | "Charr" | "Human" | "Norn" | "Sylvari";
        gender: "Male" | "Female";
        deaths: number;
        title?: number | undefined;
    }>;
    /**
     * Returns information about the crafting disciplines available to a character attached to a specific account.
     *
     * @param id - Character name
     */
    getCrafting(id: string): Promise<{
        crafting: {
            discipline: "Armorsmith" | "Artificer" | "Chef" | "Huntsman" | "Jeweler" | "Leatherworker" | "Scribe" | "Tailor" | "Weaponsmith";
            rating: number;
            active: boolean;
        }[];
    }>;
    /**
     * Returns equipment of a character attached to a specific account.
     *
     * @param id - Character name
     */
    getEquipment(id: string): Promise<{
        equipment: ({
            id: number;
            dyes?: (number | null)[] | undefined;
            upgrades?: number[] | undefined;
            stats?: {
                id: number;
                attributes: {
                    BoonDuration?: number | undefined;
                    ConditionDamage?: number | undefined;
                    ConditionDuration?: number | undefined;
                    Healing?: number | undefined;
                    Power?: number | undefined;
                    Precision?: number | undefined;
                    Toughness?: number | undefined;
                    Vitality?: number | undefined;
                };
            } | undefined;
            charges?: number | undefined;
            skin?: number | undefined;
            infusions?: number[] | undefined;
            slot?: "HelmAquatic" | "Backpack" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders" | "Accessory1" | "Accessory2" | "Ring1" | "Ring2" | "Amulet" | "Relic" | "WeaponAquaticA" | "WeaponAquaticB" | "WeaponA1" | "WeaponA2" | "WeaponB1" | "WeaponB2" | "Sickle" | "Axe" | "Pick" | "PowerCore" | "FishingLure" | "FishingBait" | "FishingRod" | "SensoryArray" | undefined;
            location?: "Equipped" | "Armory" | "EquippedFromLegendaryArmory" | "LegendaryArmory" | undefined;
            tabs?: number[] | undefined;
        } & ({
            binding: "Character";
            bound_to: string;
        } | {
            binding: "Account";
            bound_to?: undefined;
        } | {
            binding?: undefined;
            bound_to?: undefined;
        }))[];
    }>;
    /**
     * Returns information about an accounts equipment template tabs.
     *
     * @param id - Character name
     * @param tabs - Optional equipment tab number.
     */
    getEquipmentTabs(id: string, tabs?: number[] | 'all'): Promise<{
        equipment: ({
            id: number;
            dyes?: (number | null)[] | undefined;
            upgrades?: number[] | undefined;
            stats?: {
                id: number;
                attributes: {
                    BoonDuration?: number | undefined;
                    ConditionDamage?: number | undefined;
                    ConditionDuration?: number | undefined;
                    Healing?: number | undefined;
                    Power?: number | undefined;
                    Precision?: number | undefined;
                    Toughness?: number | undefined;
                    Vitality?: number | undefined;
                };
            } | undefined;
            charges?: number | undefined;
            skin?: number | undefined;
            infusions?: number[] | undefined;
            slot?: "HelmAquatic" | "Backpack" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders" | "Accessory1" | "Accessory2" | "Ring1" | "Ring2" | "Amulet" | "Relic" | "WeaponAquaticA" | "WeaponAquaticB" | "WeaponA1" | "WeaponA2" | "WeaponB1" | "WeaponB2" | "Sickle" | "Axe" | "Pick" | "PowerCore" | "FishingLure" | "FishingBait" | "FishingRod" | "SensoryArray" | undefined;
            location?: "Equipped" | "Armory" | "EquippedFromLegendaryArmory" | "LegendaryArmory" | undefined;
            tabs?: number[] | undefined;
        } & ({
            binding: "Character";
            bound_to: string;
        } | {
            binding: "Account";
            bound_to?: undefined;
        } | {
            binding?: undefined;
            bound_to?: undefined;
        }))[];
        name: string;
        tab: number;
        is_active: boolean;
        equipment_pvp: {
            amulet: number | null;
            rune: number | null;
            sigils: (number | null)[];
        };
    }[]>;
    /**
     * Returns the active equipment tab of a character attached to a specific account.
     *
     * @param id - Character name
     */
    getActiveEquipmentTab(id: string): Promise<{
        equipment: ({
            id: number;
            dyes?: (number | null)[] | undefined;
            upgrades?: number[] | undefined;
            stats?: {
                id: number;
                attributes: {
                    BoonDuration?: number | undefined;
                    ConditionDamage?: number | undefined;
                    ConditionDuration?: number | undefined;
                    Healing?: number | undefined;
                    Power?: number | undefined;
                    Precision?: number | undefined;
                    Toughness?: number | undefined;
                    Vitality?: number | undefined;
                };
            } | undefined;
            charges?: number | undefined;
            skin?: number | undefined;
            infusions?: number[] | undefined;
            slot?: "HelmAquatic" | "Backpack" | "Coat" | "Boots" | "Gloves" | "Helm" | "Leggings" | "Shoulders" | "Accessory1" | "Accessory2" | "Ring1" | "Ring2" | "Amulet" | "Relic" | "WeaponAquaticA" | "WeaponAquaticB" | "WeaponA1" | "WeaponA2" | "WeaponB1" | "WeaponB2" | "Sickle" | "Axe" | "Pick" | "PowerCore" | "FishingLure" | "FishingBait" | "FishingRod" | "SensoryArray" | undefined;
            location?: "Equipped" | "Armory" | "EquippedFromLegendaryArmory" | "LegendaryArmory" | undefined;
            tabs?: number[] | undefined;
        } & ({
            binding: "Character";
            bound_to: string;
        } | {
            binding: "Account";
            bound_to?: undefined;
        } | {
            binding?: undefined;
            bound_to?: undefined;
        }))[];
        name: string;
        tab: number;
        is_active: boolean;
        equipment_pvp: {
            amulet: number | null;
            rune: number | null;
            sigils: (number | null)[];
        };
    }>;
    /**
     * Returns information about the hero points obtained by a character attached to a specific account.
     * NOTE: This api does not currently return a lot of hero point values.
     * Check the list here for details https://wiki.guildwars2.com/wiki/API:2/characters/:id/heropoints#Notes
     *
     * @param id - Character name
     */
    getHeroPoints(id: string): Promise<string[]>;
    /**
     * Returns inventory of a character attached to a specific account.
     *
     * @param id - Character name
     */
    getInventory(id: string): Promise<{
        bags: ({
            inventory: (({
                id: number;
                count: number;
                dyes?: (number | null)[] | undefined;
                upgrades?: number[] | undefined;
                stats?: {
                    id: number;
                    attributes: {
                        BoonDuration?: number | undefined;
                        ConditionDamage?: number | undefined;
                        ConditionDuration?: number | undefined;
                        Healing?: number | undefined;
                        Power?: number | undefined;
                        Precision?: number | undefined;
                        Toughness?: number | undefined;
                        Vitality?: number | undefined;
                    };
                } | undefined;
                charges?: number | undefined;
                skin?: number | undefined;
                upgrade_slot_indices?: number[] | undefined;
                infusions?: number[] | undefined;
            } & ({
                binding: "Character";
                bound_to: string;
            } | {
                binding: "Account";
                bound_to?: undefined;
            } | {
                binding?: undefined;
                bound_to?: undefined;
            })) | null)[];
            id: number;
            size: number;
        } | null)[];
    }>;
    /**
     * Returns information about the quests selected that by a character attached to a specific account.
     *
     * @param id - Character name
     */
    getQuests(id: string): Promise<number[]>;
    /**
     * Returns information about recipes that the given character can use.
     *
     * @param id - Character name
     */
    getRecipes(id: string): Promise<{
        recipes: number[];
    }>;
    /**
     * Returns information about Super Adventure Box on a character attached to a specific account.
     *
     * @param id - Character name
     */
    getSAB(id: string): Promise<{
        unlocks: {
            id: number;
            name?: string | undefined;
        }[];
        zones: {
            id: number;
            world: number;
            mode: "infantile" | "normal" | "tribulation";
            zone: number;
        }[];
        songs: {
            id: number;
            name: "secret_song" | "gatekeeper_lullaby" | "shatter_serenade";
        }[];
    }>;
    /**
     * Returns information about the skills equipped on a character attached to a specific account.
     *
     * @param id - Character name
     */
    getSkills(id: string): Promise<{
        skills: {
            pvp: {
                heal: number | null;
                utilities: (number | null)[];
                elite: number | null;
                legends?: (string | null)[] | undefined;
            };
            wvw: {
                heal: number | null;
                utilities: (number | null)[];
                elite: number | null;
                legends?: (string | null)[] | undefined;
            };
            pve: {
                heal: number | null;
                utilities: (number | null)[];
                elite: number | null;
                legends?: (string | null)[] | undefined;
            };
        };
    }>;
    /**
     * Returns information about the specializations equipped on a character attached to a specific account.
     *
     * @param id - Character name
     */
    getSpecializations(id: string): Promise<{
        specializations: {
            pvp: {
                traits: number[];
                id: number;
            }[];
            wvw: {
                traits: number[];
                id: number;
            }[];
            pve: {
                traits: number[];
                id: number;
            }[];
        };
    }>;
    /**
     * Returns information about the training of a character attached to a specific account.
     *
     * @param id - Character name
     */
    getTraining(id: string): Promise<{
        training: {
            id: number;
            done: boolean;
            spent: number;
        }[];
    }>;
}

/**
 * /v2/commerce Api
 */
declare class CommerceApi extends ApiBase {
    /**
     * Provides access to the current items and coins available for pickup on this account.
     */
    getDeliveries(): Promise<{
        items: {
            id: number;
            count: number;
        }[];
        coins: number;
    }>;
    /**
     * Returns the current coins to gems exchange rate, or vice versa.
     *
     * @param type - Gems to coins, or vice versa
     * @param quantity - Quantity of coins to be exchanged (in copper coins)
     */
    getExchange(type: 'gems' | 'coins', quantity: number): Promise<{
        quantity: number;
        coins_per_gem: number;
    }>;
    /**
     * Returns current buy and sell listings from the trading post.
     * TODO: Functionality to return a complete list of every listing is currently unsupported
     *
     * @param ids - Listing ids
     */
    getListings(ids: number[]): Promise<{
        id: number;
        buys: {
            listings: number;
            quantity: number;
            unit_price: number;
        }[];
        sells: {
            listings: number;
            quantity: number;
            unit_price: number;
        }[];
    }[]>;
    /**
     * Returns current aggregated buy and sell listing information from the trading post.
     * TODO: Functionality to return a complete list of every listing is currently unsupported
     *
     * @param ids - Item ids
     */
    getPrices(ids: number[]): Promise<{
        id: number;
        buys: {
            quantity: number;
            unit_price: number;
        };
        sells: {
            quantity: number;
            unit_price: number;
        };
        whitelisted: boolean;
    }[]>;
    /**
     * Provides access to the current and historical transactions of a player.
     * Results are cached for 5 minutes.
     *
     * @param status - Current or historical transactions
     * @param type - Buy or sell transactions
     */
    getTransactions(status: 'current' | 'history', type: 'buys' | 'sells'): Promise<{
        id: number;
        created: string;
        quantity: number;
        item_id: number;
        price: number;
        purchased?: string | undefined;
    }[]>;
}

/**
 * /v2/emblem Api
 */
declare class EmblemApi extends ApiBase {
    /**
     * Returns image resources that are needed to render the guild emblems.
     *
     * @param type - Background or foreground
     * @param ids - List of emblem ids, or "all"
     */
    get(type: 'foregrounds' | 'backgrounds', ids?: number[] | 'all'): Promise<{
        id: number;
        layers: string[];
    }[]>;
}

/**
 * /v2/guild Api
 */
declare class GuildApi extends ApiBase {
    /**
     * Returns core details about a given guild.
     * The end point will include more or less fields depend on whether an API Key of a Leader or
     * Member of the Guild with the guilds scope is included in the request.
     *
     * @param id - The guild id
     */
    get(id: string): Promise<{
        emblem: {
            background: {
                colors: number[];
                id: number;
            };
            foreground: {
                colors: number[];
                id: number;
            };
            flags: ("FlipBackgroundHorizontal" | "FlipBackgroundVertical" | "FlipForegroundHorizontal" | "FlipForegroundVertical")[];
        };
        id: string;
        name: string;
        tag: string;
        level?: number | undefined;
        motd?: string | undefined;
        influence?: number | undefined;
        aetherium?: string | undefined;
        favor?: number | undefined;
        member_count?: number | undefined;
        member_capacity?: number | undefined;
    }>;
    /**
     * Returns information about certain events in a guild's log.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     * @param since - Starting point for the log, by log id
     */
    getLog(id: string, since?: number): Promise<({
        id: number;
        time: string;
    } & ({
        type: "joined";
        user: string;
    } | {
        type: "invited";
        user: string;
        invited_by: string;
    } | {
        type: "kick";
        user: string;
        kicked_by: string;
    } | {
        type: "rank_change";
        user: string;
        old_rank: string;
        new_rank: string;
        changed_by?: string | undefined;
    } | {
        type: "stash";
        count: number;
        item_id: number;
        coins: number;
        operation: "deposit" | "withdraw" | "move";
    } | {
        type: "motd";
        motd: string;
        user: string;
    } | {
        type: "upgrade";
        action: "queued" | "cancelled" | "completed" | "sped_up";
        upgrade_id: number;
        count?: number | undefined;
        recipe_id?: number | undefined;
    }))[]>;
    /**
     * Returns information about the members of a specified guild.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getMembers(id: string): Promise<{
        name: string;
        joined: string | null;
        rank: string;
    }[]>;
    /**
     * Returns information about the ranks of a specified guild.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getRanks(id: string): Promise<{
        id: string;
        order: number;
        icon: string;
        permissions: string[];
    }[]>;
    /**
     * Returns information about the items in a guild's vault.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getStash(id: string): Promise<{
        inventory: ({
            id: number;
            count: number;
        } | null)[];
        size: number;
        coins: number;
        upgrade_id: number;
        note: string;
    }[]>;
    /**
     * Returns information about the items in a guild's storage.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getStorage(id: string): Promise<{
        id: number;
        count: number;
    }[]>;
    /**
     * Returns information about the teams in a guild.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getTeams(id: string): Promise<{
        members: {
            name: string;
            role: "Member" | "Captain";
        }[];
        id: number;
        name: string;
        aggregate: {
            wins: number;
            losses: number;
            desertions: number;
            byes: number;
            forfeits: number;
        };
        ladders: {
            ranked?: {
                wins: number;
                losses: number;
                desertions: number;
                byes: number;
                forfeits: number;
            } | undefined;
            unranked?: {
                wins: number;
                losses: number;
                desertions: number;
                byes: number;
                forfeits: number;
            } | undefined;
        };
        games: {
            id: string;
            map_id: string;
            started: string;
            ended: string;
            team: string;
            scores: {
                red: number;
                blue: number;
            };
            rating_type: "Ranked" | "Unranked" | "None";
            rating_change: number;
            season?: string | undefined;
        }[];
        seasons?: {
            id: string;
            rating: number;
            wins: number;
            losses: number;
        }[] | undefined;
    }[]>;
    /**
     * Returns information about the items in a guild's treasury.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getTreasury(id: string): Promise<{
        count: number;
        item_id: number;
        needed_by: {
            count: number;
            upgrade_id: number;
        }[];
    }[]>;
    /**
     * Returns information about the guild's upgrades.
     * The endpoint requires the scope guilds, and will only work if the API key is from the guild leader's account.
     *
     * @param id - Unique guild id
     */
    getUpgrades(id: string): Promise<number[]>;
    /**
     * Returns information about all guild permissions.
     *
     * @param ids - Permission ids
     */
    getPermissions(ids?: string[]): Promise<string[] | {
        id: string;
        name: string;
        description: string;
    }[]>;
    /**
     * Returns information on guild ids to be used for other API queries.
     *
     * @param name - Guild name
     */
    find(name: string): Promise<string[]>;
    /**
     * Returns information about all available Guild Hall upgrades, including scribe decorations.
     *
     * @param ids - Guild upgrade ids
     */
    upgradeInfo(ids: number[]): Promise<({
        id: number;
        name: string;
        description: string;
        icon: string;
        build_time: number;
        required_level: number;
        experience: number;
        prerequisites: number[];
        costs: ({
            name: string;
            type: "Item";
            count: number;
            item_id?: number | undefined;
        } | {
            name: string;
            type: "Collectible";
            count: number;
            item_id?: number | undefined;
        } | {
            name: string;
            type: "Currency";
            count: number;
        } | {
            type: "Coins";
            count: number;
        })[];
    } & ({
        type: "AccumulatingCurrency";
    } | {
        type: "Boost";
    } | {
        type: "Claimable";
    } | {
        type: "Consumable";
    } | {
        type: "Decoration";
    } | {
        type: "GuildHall";
    } | {
        type: "GuildHallExpedition";
    } | {
        type: "Hub";
    } | {
        type: "Queue";
    } | {
        type: "Unlock";
    } | {
        type: "BankBag";
        bag_max_items?: number | undefined;
        bag_max_coins?: number | undefined;
    }))[]>;
}

/**
 * /v2/home Api
 */
declare class HomeApi extends ApiBase {
    /**
     * Returns information about cats.
     * Identical to /v2/cats
     *
     * @param ids - List of cat ids, or "all"
     */
    getCats(ids?: number[] | 'all'): Promise<{
        id: number;
        hint?: string | undefined;
    }[]>;
    /**
     * Returns a list of all currently available home instance nodes.
     * Can be resolved against /v2/account/home/nodes to identify an account's unlocked nodes.
     *
     * @param ids - List of node ids, or "all"
     */
    getNodes(ids?: string[] | 'all'): Promise<{
        id: string;
    }[]>;
}

/**
 * /v2/homestead Api
 */
declare class HomesteadApi extends ApiBase {
    /**
     * Returns information about all available homestead decorations.
     */
    getDecorations(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about all available homestead decorations.
     *
     * @param ids - List of decoration ids
     */
    getDecorations(ids: number[]): Promise<z.infer<typeof HomesteadDecorationsDTO>>;
    /**
     * Returns information about all categories for homestead decorations.
     */
    getCategories(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about all categories for homestead decorations.
     *
     * @param ids - List of decoration category ids
     */
    getCategories(ids: number[]): Promise<z.infer<typeof HomesteadDecorationsCategoriesDTO>>;
    /**
     * Returns information about all available homestead glyphs.
     */
    getGlyphs(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about all available homestead glyphs.
     *
     * @param ids - List of glyph ids
     */
    getGlyphs(ids: string[]): Promise<z.infer<typeof HomesteadGlyphsDTO>>;
}

/**
 * /v2/backstory Api
 */
declare class BackstoryApi extends ApiBase {
    /**
     * Returns information about the Biography answers that are in the game.
     */
    getAnswers(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about the Biography answers that are in the game.
     *
     * @param ids - List of answer ids, or "all"
     */
    getAnswers(ids: Array<`${number}-${number}`> | 'all'): Promise<z.infer<typeof BackstoryAnswersDTO>>;
    /**
     * Returns information about the Biography questions that are in the game.
     */
    getQuestions(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the Biography questions that are in the game.
     *
     * @param ids - List of question ids, or "all"
     */
    getQuestions(ids: number[] | 'all'): Promise<z.infer<typeof BackstoryQuestionsDTO>>;
}

/**
 * /v2/build Api
 */
declare class BuildApi extends ApiBase {
    /**
     * Returns the current build id of the game.
     * NOTE: This endpoint is broken, and after a certain timestamp, seems to be returning the exact same value.
     */
    get(): Promise<{
        id: number;
    }>;
}

/**
 * /v2/colors Api
 */
declare class ColorsApi extends ApiBase {
    /**
     * Returns all dye colors in the game, including localized names and their color component information.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns all dye colors in the game, including localized names and their color component information.
     *
     * @param ids - Ids of the requested colors, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof ColorsDTO>>;
}

/**
 * /v2/continents api
 */
declare class ContinentsApi extends ApiBase {
    /**
     * Returns information about continents, their floors, regions, and maps.
     *
     * NOTE: Refer to the function overload types for usage.
     * Endpoint priority is as follows -> maps > regions > floors > continents > none
     * As such, for example, maps is present, all previous arguments must be of type number
     */
    getContinents(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about continents, their floors, regions, and maps.
     *
     * @param continents - Continent ids, or "all"
     */
    getContinents(continents: number[] | 'all'): Promise<z.infer<typeof ContinentsDTO>>;
    /**
     * Returns information about continents, their floors, regions, and maps.
     *
     * @param continents - Continent id.
     * @param floors - Floor ids, or "all".
     */
    getContinents(continents: number, floors: number[] | 'all'): Promise<z.infer<typeof ContinentsFloorsDTO>>;
    /**
     * Returns information about continents, their floors, regions, and maps.
     *
     * @param continents - Continent id.
     * @param floors - Floor id.
     * @param regions - Region ids, or "all".
     */
    getContinents(continents: number, floors: number, regions: number[] | 'all'): Promise<z.infer<typeof ContinentsRegionsDTO>>;
    /**
     * Returns information about continents, their floors, regions, and maps.
     *
     * @param continents - Continent id.
     * @param floors - Floor id.
     * @param regions - Region id.
     * @param maps - Map ids, or "all".
     */
    getContinents(continents: number, floors: number, regions: number, maps: number[] | 'all'): Promise<z.infer<typeof ContinentsMapsDTO>>;
}

/**
 * /v2/currencies Api
 */
declare class CurrenciesApi extends ApiBase {
    /**
     * Returns a list of the currencies contained in the account wallet.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns a list of the currencies contained in the account wallet.
     *
     * @param ids - Currency ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof CurrenciesDTO>>;
}

/**
 * /v2/dailycrafting Api
 */
declare class DailyCraftingApi extends ApiBase {
    /**
     * Returns information about time-gated recipes that can be crafted in-game.
     */
    get(): Promise<string[]>;
}

/**
 * /v2/dungeons Api
 */
declare class DungeonsApi extends ApiBase {
    /**
     * Returns details about each dungeon, and it's associated paths.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns details about each dungeon, and it's associated paths.
     *
     * @param ids - List of dungeon ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof DungeonsDTO>>;
}

/**
 * /v2/emotes Api
 */
declare class EmotesApi extends ApiBase {
    /**
     * Returns information about unlockable emotes.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about unlockable emotes.
     *
     * @param ids - Emote names, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof EmotesDTO>>;
}

/**
 * /v2/files Api
 */
declare class FilesApi extends ApiBase {
    /**
     * Returns commonly requested in-game assets that may be used to enhance API-derived applications.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns commonly requested in-game assets that may be used to enhance API-derived applications.
     *
     * @param ids - List of file ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof FilesDTO>>;
}

/**
 * /v2/finishers Api
 */
declare class FinishersApi extends ApiBase {
    /**
     * Returns information about finishers that are available in-game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about finishers that are available in-game.
     *
     * @param ids - List of finisher ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof FinishersDTO>>;
}

/**
 * /v2/gliders Api.
 */
declare class GlidersApi extends ApiBase {
    /**
     * Returns information about gliders that are available in-game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about gliders that are available in-game.
     *
     * @param ids - List of glider ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof GlidersDTO>>;
}

/**
 * /v2/items Api
 */
declare class ItemsApi extends ApiBase {
    /**
     * Returns information about items that were discovered by players in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about items that were discovered by players in the game.
     *
     * @param ids - List of item ids
     */
    get(ids: number[]): Promise<z.infer<typeof ItemsDTO>>;
}

/**
 * /v2/itemstats Api
 */
declare class ItemStatsApi extends ApiBase {
    /**
     * Returns information about itemstats for items that are in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about itemstats for items that are in the game.
     *
     * @param ids - List of itemstat ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof ItemStatsDTO>>;
}

/**
 * /v2/jadebots Api
 */
declare class JadebotsApi extends ApiBase {
    /**
     * Returns all Jade Bot skins in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns all Jade Bot skins in the game.
     *
     * @param ids - Jade bot ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof JadebotsDTO>>;
}

/**
 * /v2/legendaryarmory Api
 */
declare class LegendaryArmoryApi extends ApiBase {
    /**
     * Returns information about Legendary Armory items that are available in-game
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about Legendary Armory items that are available in-game
     *
     * @param ids - List of legendary armory item ids
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof LegendaryArmoryDTO>>;
}

/**
 * /v2/legends Api
 */
declare class LegendsApi extends ApiBase {
    /**
     * Returns information about the Revenant Legends that are in the game.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about the Revenant Legends that are in the game.
     *
     * @param ids - List of legend ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof LegendsDTO>>;
}

/**
 * /v2/mailcarriers Api
 */
declare class MailCarriersApi extends ApiBase {
    /**
     * Returns information about the mail carriers that are in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the mail carriers that are in the game.
     *
     * @param ids - List of mail carrier ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof MailCarriersDTO>>;
}

/**
 * /v2/mapchests Api
 */
declare class MapChestsApi extends ApiBase {
    /**
     * Returns information about Hero's Choice Chests that can be acquired once a day in-game.
     * NOTE: This endpoint is known to have missing data.
     */
    get(): Promise<string[]>;
}

/**
 * /v2/maps Api
 *
 * NOTE: This endpoint is frequently out of sync.
 * Visit https://wiki.guildwars2.com/wiki/API:2/maps for more info
 */
declare class MapsApi extends ApiBase {
    /**
     * Returns details about maps in the game, including details about floor and translation
     * data on how to translate between world coordinates and map coordinates.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns details about maps in the game, including details about floor and translation
     * data on how to translate between world coordinates and map coordinates.
     *
     * @param ids - List of map ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof MapsDTO>>;
}

/**
 * /v2/masteries Api
 * NOTE: This endpoint is known to have missing or incomplete data
 */
declare class MasteriesApi extends ApiBase {
    /**
     * Returns information about masteries that are available in-game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about masteries that are available in-game.
     *
     * @param ids - List of mastery ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof MasteriesDTO>>;
}

/**
 * /v2/materials Api.
 */
declare class MaterialsApi extends ApiBase {
    /**
     * Returns information about the categories in material storage.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the categories in material storage.
     *
     * @param ids - List of material ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof MaterialsDTO>>;
}

/**
 * /v2/minis Api
 */
declare class MinisApi extends ApiBase {
    /**
     * Returns details about minis in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns details about minis in the game.
     *
     * @param ids - List of mini ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof MinisDTO>>;
}

/**
 * /v2/mounts Api
 */
declare class MountsApi extends ApiBase {
    /**
     * Returns information about mount skins that are available in-game.
     */
    getSkins(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about mount skins that are available in-game.
     *
     * @param ids - List of mount skin ids, or "all"
     */
    getSkins(ids: number[] | 'all'): Promise<z.infer<typeof MountsSkinsDTO>>;
    /**
     * Returns information about mount types that are available in-game.
     */
    getTypes(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about mount types that are available in-game.
     *
     * @param ids - List of mount type ids, or "all"
     */
    getTypes(ids: string[] | 'all'): Promise<z.infer<typeof MountsTypesDTO>>;
}

/**
 * /v2/novelties Api
 */
declare class NoveltiesApi extends ApiBase {
    /**
     * Returns information about novelties that are available in-game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about novelties that are available in-game.
     *
     * @param ids - List of novelty ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof NoveltiesDTO>>;
}

/**
 * /v2/outfits Api
 */
declare class OutfitsApi extends ApiBase {
    /**
     * Returns information about the outfits that are in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the outfits that are in the game.
     *
     * @param ids - List of outfit ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof OutfitsDTO>>;
}

/**
 * /v2/pets Api
 */
declare class PetsApi extends ApiBase {
    /**
     * Returns information about the Ranger pets that are in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the Ranger pets that are in the game.
     *
     * @param ids - List of pet ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof PetsDTO>>;
}

/**
 * /v2/professions Api
 */
declare class ProfessionsApi extends ApiBase {
    /**
     * Returns information about professions that are in the game.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about professions that are in the game.
     *
     * @param ids - List of profession ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof ProfessionsDTO>>;
}

/**
 * /v2/quaggans Api
 */
declare class QuaggansApi extends ApiBase {
    /**
     * Returns quaggan images.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns quaggan images.
     *
     * @param ids - List of quaggan ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof QuaggansDTO>>;
}

/**
 * /v2/quests Api
 */
declare class QuestsApi extends ApiBase {
    /**
     * Returns information about Story Journal missions within the personal story and Living World.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about Story Journal missions within the personal story and Living World.
     *
     * @param ids - List of quest ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof QuestsDTO>>;
}

/**
 * /v2/races Api
 */
declare class RacesApi extends ApiBase {
    /**
     * Returns information on in-game playable races.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information on in-game playable races.
     *
     * @param ids - List of race ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof RacesDTO>>;
}

/**
 * /v2/raids Api
 */
declare class RaidsApi extends ApiBase {
    /**
     * Returns information on in-game raids.
     */
    get(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information on in-game raids.
     *
     * @param ids - Raid ids, or "all"
     */
    get(ids: string[] | 'all'): Promise<z.infer<typeof RaidsDTO>>;
}

/**
 * /v2/recipes Api
 */
declare class RecipesApi extends ApiBase {
    /**
     * Returns information about recipes that were discovered by players in the game.
     * NOTE: The Api sometimes returns incorrect item ids in "output_id" fields
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about recipes that were discovered by players in the game.
     * NOTE: The Api sometimes returns incorrect item ids in "output_id" fields
     *
     * @param ids - List of recipe ids, or "all"
     */
    get(ids: number[]): Promise<z.infer<typeof RecipesDTO>>;
    /**
     * Allows searching for recipe.
     *
     * @param type - Either "input" or "output"
     * @param ids - List of item ids
     */
    search(type: 'input' | 'output', ids: number[]): Promise<number[]>;
}

/**
 * /v2/skiffs Api
 */
declare class SkiffsApi extends ApiBase {
    /**
     * Returns all Skiff skins in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns all Skiff skins in the game.
     *
     * @param ids - List of skiff ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof SkiffsDTO>>;
}

/**
 * /v2/skills Api
 */
declare class SkillsApi extends ApiBase {
    /**
     * Returns information about skills usable by players in the game.
     *
     * @param ids - List of skill ids
     */
    get(ids: number[]): Promise<{
        professions: string[];
        id: number;
        name: string;
        type: "Weapon" | "Utility" | "Heal" | "Elite" | "Bundle" | "Monster" | "Pet" | "Profession" | "Toolbelt" | "Transform";
        description: string;
        icon: string;
        slot: "Utility" | "Elite" | `Weapon_${number}` | "Pet" | `Downed_${number}` | `Profession_${number}`;
        chat_link: string;
        flags: ("NoUnderwater" | "GroundTargeted")[];
        weapon_type: string;
        categories?: string[] | undefined;
        cost?: number | undefined;
        attunement?: "Fire" | "Air" | "Water" | "Earth" | undefined;
        facts?: ({
            text: string;
            icon?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "Duration";
            duration: number;
        } | {
            type: "Heal";
            hit_count: number;
        } | {
            type: "HealingAdjust";
            hit_count: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        }))[] | undefined;
        traited_facts?: (({
            text: string;
            icon?: string | undefined;
        } & ({
            value: number;
            type: "AttributeAdjust";
            target: string;
        } | {
            status: string;
            type: "Buff";
            description?: string | undefined;
            apply_count?: number | undefined;
            duration?: number | undefined;
        } | {
            type: "ComboField";
            field_type: "Light" | "Fire" | "Ice" | "Lightning" | "Air" | "Dark" | "Poison" | "Smoke" | "Ethereal" | "Water";
        } | {
            type: "ComboFinisher";
            finisher_type: "Blast" | "Leap" | "Projectile" | "Whirl";
            percent: number;
        } | {
            type: "Damage";
            hit_count: number;
            dmg_multiplier: number;
        } | {
            type: "Distance";
            distance: number;
        } | {
            type: "Duration";
            duration: number;
        } | {
            type: "Heal";
            hit_count: number;
        } | {
            type: "HealingAdjust";
            hit_count: number;
        } | {
            type: "NoData";
        } | {
            value: number;
            type: "Number";
        } | {
            type: "Percent";
            percent: number;
        } | {
            type: "PrefixedBuff";
            apply_count: number;
            duration: number;
            prefix: {
                icon: string;
                text: string;
                status?: string | undefined;
                description?: string | undefined;
            };
            status?: string | undefined;
            description?: string | undefined;
        } | {
            type: "Radius";
            distance: number;
        } | {
            value: number;
            type: "Range";
        } | {
            value: number;
            type: "Recharge";
        } | {
            value: true;
            type: "StunBreak";
        } | {
            type: "Time";
            duration: number;
        } | {
            value: true;
            type: "Unblockable";
        })) & {
            requires_trait: number;
            overrides?: number | undefined;
        })[] | undefined;
        dual_wield?: string | undefined;
        flip_skill?: number | undefined;
        initiative?: number | undefined;
        next_chain?: number | undefined;
        prev_chain?: number | undefined;
        transform_skills?: unknown[] | undefined;
        bundle_skills?: unknown[] | undefined;
        toolbelt_skill?: number | undefined;
    }[]>;
}

/**
 * /v2/skins Api
 */
declare class SkinsApi extends ApiBase {
    /**
     * Returns information about skins that were discovered by players in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about skins that were discovered by players in the game.
     *
     * @param ids - List of skin ids
     */
    get(ids: number[]): Promise<z.infer<typeof SkinsDTO>>;
}

/**
 * /v2/specializations Api
 */
declare class SpecializationsApi extends ApiBase {
    /**
     * Returns information on currently released specializations.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information on currently released specializations.
     *
     * @param ids - List of specialization ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof SpecializationsDTO>>;
}

declare const storiesCore: z.ZodArray<z.ZodNumber, "many">;
declare class StoriesApi extends ApiBase {
    /**
     * Returns information about the Story Journal stories; including the personal story and Living World.
     */
    getStories(): Promise<z.infer<typeof storiesCore>>;
    /**
     * Returns information about the Story Journal stories; including the personal story and Living World.
     *
     * @param ids - List of story ids, or "all"
     */
    getStories(ids: number[] | 'all'): Promise<z.infer<typeof StoriesDTO>>;
    /**
     * Returns information about the Story Journal story seasons; including the personal story and Living World.
     */
    getSeasons(): Promise<string[]>;
    /**
     * Returns information about the Story Journal story seasons; including the personal story and Living World.
     *
     * @param ids - List of season ids, or "all"
     */
    getSeasons(ids: string[] | 'all'): Promise<z.infer<typeof StoriesSeasonsDTO>>;
}

/**
 * /v2/createsubtoken Api
 */
declare class SubtokenApi extends ApiBase {
    /**
     * Creates a subtoken, or an Api key with limited permissions.
     *
     * @param expire - Expiration date. Either valid date format, or ISO-8601
     * @param permissions - Api token permissions
     * @param urls - Specific /v2/ api urls to allow access to
     */
    get(expire: string, permissions: ApiPermissions[], urls?: EndpointUrls[]): Promise<{
        subtoken: string;
    }>;
}

declare class TitlesApi extends ApiBase {
    /**
     * Returns information about the titles that are in the game.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the titles that are in the game.
     *
     * @param ids - List of title ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof TitlesDTO>>;
}

/**
 * /v2/tokeninfo Api
 */
declare class TokenInfoApi extends ApiBase {
    /**
     * Returns information about the supplied API key.
     */
    get(): Promise<{
        id: string;
        name: string;
        permissions: ("account" | "progression" | "wallet" | "characters" | "pvp" | "guilds" | "builds" | "inventories" | "tradingpost" | "unlocks")[];
        type?: string | undefined;
        expires_at?: string | undefined;
        issued_at?: string | undefined;
        urls?: string[] | undefined;
    }>;
}

/**
 * /v2/traits Api
 */
declare class TraitsApi extends ApiBase {
    /**
     * Returns information about specific traits which are contained within specializations.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about specific traits which are contained within specializations.
     *
     * @param ids - List of trait ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof TraitsDTO>>;
}

/**
 * /v2/worldbosses Api
 */
declare class WorldBossesApi extends ApiBase {
    /**
     * Returns information about scheduled World bosses in Core Tyria that reward boss chests that can be be opened once a day in-game.
     */
    get(): Promise<string[]>;
}

/**
 * /v2/worlds Api
 */
declare class WorldsApi extends ApiBase {
    /**
     * Returns information about the available worlds, or servers.
     */
    get(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the available worlds, or servers.
     *
     * @param ids - List of realm ids, or "all"
     */
    get(ids: number[] | 'all'): Promise<z.infer<typeof WorldsDTO>>;
}

/**
 * /v2/pvp Api
 */
declare class PvPApi extends ApiBase {
    /**
     * Returns information about the PvP amulets that are in the game.
     */
    getAmulets(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the PvP amulets that are in the game.
     *
     * @param ids - List of amulet ids, or "all"
     */
    getAmulets(ids: number[] | 'all'): Promise<z.infer<typeof PvPAmuletsDTO>>;
    /**
     * Returns information about past PvP matches the player has participated in.
     */
    getGames(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about past PvP matches the player has participated in.
     *
     * @param ids - List of game ids, or "all"
     */
    getGames(ids: string[] | 'all'): Promise<z.infer<typeof PvPGamesDTO>>;
    /**
     * Returns information about pvp heroes that are available in-game.
     */
    getHeroes(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about pvp heroes that are available in-game.
     *
     * @param ids - List of hero ids, or "all"
     */
    getHeroes(ids: string[] | 'all'): Promise<z.infer<typeof PvPHeroesDTO>>;
    /**
     * Returns information about the available ranks in the Player versus Player game mode.
     */
    getRanks(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the available ranks in the Player versus Player game mode.
     *
     * @param ids - List of rank ids, or "all"
     */
    getRanks(ids: number[] | 'all'): Promise<z.infer<typeof PvPRanksDTO>>;
    /**
     * Returns information about League seasons.
     */
    getSeasons(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns information about League seasons.
     *
     * @param ids - Season ids, or "all"
     */
    getSeasons(ids: string[] | 'all'): Promise<z.infer<typeof PvPSeasonDTO>>;
    /**
     * Returns information about League season leaderboards for either NA or EU.
     *
     * @param id - PvP season id
     */
    getLeaderboards(id: string): Promise<z.infer<typeof PvPSeasonLeaderboardRegionsDTO>>;
    /**
     * Returns information about League season leaderboards for either NA or EU.
     *
     * @param id - PvP season id
     * @param region - EU or NA region
     * @param type - For season 1-4, legendary or guild type. For season 5+, "ladder"
     */
    getLeaderboards(id: string, region: 'na' | 'eu', type: 'legendary' | 'guild' | 'ladder'): Promise<z.infer<typeof PvPSeasonLeaderboardsDTO>>;
    /**
     * Returns information about player pips.
     */
    getStandings(): Promise<{
        current: {
            tier: number;
            points: number;
            total_points: number;
            division: number;
            repeats: number;
            rating?: number | undefined;
            decay?: number | undefined;
        };
        best: {
            tier: number;
            points: number;
            total_points: number;
            division: number;
            repeats: number;
        };
        season_id: string;
    }[]>;
    /**
     * Resource returns information about wins and losses in the account's PvP matches.
     */
    getStats(): Promise<{
        professions: Record<string, {
            wins: number;
            losses: number;
            desertions: number;
            byes: number;
            forfeits: number;
        }>;
        aggregate: {
            wins: number;
            losses: number;
            desertions: number;
            byes: number;
            forfeits: number;
        };
        ladders: Record<string, {
            wins: number;
            losses: number;
            desertions: number;
            byes: number;
            forfeits: number;
        }>;
        pvp_rank: number;
        pvp_rank_points: number;
        pvp_rank_rollovers: number;
    }>;
}

declare class WizardsVaultApi extends ApiBase {
    /**
     * Returns information about the current Wizard's Vault season.
     */
    get(): Promise<{
        listings: number[];
        objectives: number[];
        title: string;
        start: string;
        end: string;
    }>;
    /**
     * Returns details about listings in the Wizard's Vault.
     */
    getListings(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns details about listings in the Wizard's Vault.
     *
     * @param ids - (optional) List of listing ids, or "all".
     */
    getListings(ids: number[] | 'all'): Promise<z.infer<typeof WizardsVaultListingsDTO>>;
    /**
     * Returns all Wizard's Vault's objectives in the game.
     */
    getObjectives(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns all Wizard's Vault's objectives in the game.
     *
     * @param ids - (optional) List of objective ids, or "all".
     */
    getObjectives(ids: number[] | 'all'): Promise<z.infer<typeof WizardsVaultObjectivesDTO>>;
}

/**
 * /v2/wvw Api
 */
declare class WorldVsWorldApi extends ApiBase {
    /**
     * Returns information about the available abilities in the World versus World game mode.
     */
    getAbilities(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the available abilities in the World versus World game mode.
     *
     * @param ids - List of WvW ability ids
     */
    getAbilities(ids: number[] | 'all'): Promise<z.infer<typeof WvWAbilitiesDTO>>;
    /**
     * Returns further details about the specified match, including the total score, kills and deaths, and further details for each map.
     */
    getMatches(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns further details about the specified match, including the total score, kills and deaths, and further details for each map.
     *
     * @param ids - List of match ids, or "all"
     */
    getMatches(ids: Array<`${number}-${number}`> | 'all'): Promise<z.infer<typeof WvWMatchesDTO>>;
    /**
     * Returns further details about the specified match, including the total score, kills and deaths, and further details for each map.
     * The same information as {@link WorldVsWorldApi#getMatches}, however more limited.
     *
     * @param type - Overview, Scores, or Stats for the matches
     * @param world - World id
     */
    getMatchesByWorld(type: 'overview' | 'scores' | 'stats', world: number): Promise<{
        worlds: {
            red: number;
            blue: number;
            green: number;
        };
        id: string;
        start_time: string;
        end_time: string;
        all_worlds: Partial<Record<"red" | "blue" | "green", number[]>>;
    } | {
        maps: {
            id: number;
            type: string;
            scores: {
                red: number;
                blue: number;
                green: number;
            };
        }[];
        id: string;
        scores: {
            red: number;
            blue: number;
            green: number;
        };
        skirmishes: {
            id: number;
            scores: {
                red: number;
                blue: number;
                green: number;
            };
            map_scores: {
                type: "BlueHome" | "Center" | "GreenHome" | "RedHome";
                scores: {
                    red: number;
                    blue: number;
                    green: number;
                };
            }[];
        }[];
    } | {
        maps: {
            id: number;
            type: string;
            deaths: {
                red: number;
                blue: number;
                green: number;
            };
        }[];
        id: string;
        deaths: {
            red: number;
            blue: number;
            green: number;
        };
        kills: {
            red: number;
            blue: number;
            green: number;
        };
    }>;
    /**
     * Returns details about World vs. World objectives such as camps, towers, and keeps.
     */
    getObjectives(): Promise<z.infer<typeof stringArrayType>>;
    /**
     * Returns details about World vs. World objectives such as camps, towers, and keeps.
     *
     * @param ids - Objective ids, or "all"
     */
    getObjectives(ids: Array<`${number}-${number}`>): Promise<z.infer<typeof WvWObjectivesDTO>>;
    /**
     * Returns information about the available ranks in the World versus World game mode.
     */
    getRanks(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns information about the available ranks in the World versus World game mode.
     *
     * @param ids - List of WvW rank ids, or "all"
     */
    getRanks(ids: number[] | 'all'): Promise<z.infer<typeof WvWRanksDTO>>;
    /**
     * Returns details about available World vs. World upgrades for objectives such as camps, towers, and keeps.
     */
    getUpgrades(): Promise<z.infer<typeof numberArrayType>>;
    /**
     * Returns details about available World vs. World upgrades for objectives such as camps, towers, and keeps.
     *
     * @param ids - List of WvW upgrades, or "all"
     */
    getUpgrades(ids: number[] | 'all'): Promise<z.infer<typeof WvWUpgradesDTO>>;
}

/**
 * Entrypoint for the API
 */
declare class GW2Api extends ApiBase {
    /** /v2/account Api */
    readonly account: AccountApi;
    /** /v2/achievements Api */
    readonly achievements: AchievementsApi;
    /** /v2/backstory Api */
    readonly backstory: BackstoryApi;
    /** /v2/build Api */
    readonly build: BuildApi;
    /** /v2/characters Api */
    readonly characters: CharactersApi;
    /** /v2/colors Api */
    readonly colors: ColorsApi;
    /** /v2/commerce Api */
    readonly commerce: CommerceApi;
    /** /v2/continents Api */
    readonly continents: ContinentsApi;
    /** /v2/currencies Api */
    readonly currencies: CurrenciesApi;
    /** /v2/dailycrafting Api */
    readonly dailyCrafting: DailyCraftingApi;
    /** /v2/dungeons Api */
    readonly dungeons: DungeonsApi;
    /** /v2/emblem Api */
    readonly emblem: EmblemApi;
    /** /v2/emotes Api */
    readonly emotes: EmotesApi;
    /** /v2/files Api */
    readonly files: FilesApi;
    /** /v2/finishers Api */
    readonly finishers: FinishersApi;
    /** /v2/gliders Api */
    readonly gliders: GlidersApi;
    /** /v2/guild Api */
    readonly guild: GuildApi;
    /** /v2/home Api */
    readonly home: HomeApi;
    /** /v2/homestead Api */
    readonly homestead: HomesteadApi;
    /** /v2/items Api */
    readonly items: ItemsApi;
    /** /v2/itemstats Api */
    readonly itemstats: ItemStatsApi;
    /** /v2/jadebots Api */
    readonly jadebots: JadebotsApi;
    /** /v2/legendaryarmory Api */
    readonly legendaryArmory: LegendaryArmoryApi;
    /** /v2/legends Api */
    readonly legends: LegendsApi;
    /** /v2/mailcarriers Api */
    readonly mailCarriers: MailCarriersApi;
    /** /v2/mapchests Api */
    readonly mapChests: MapChestsApi;
    /** /v2/maps Api */
    readonly maps: MapsApi;
    /** /v2/masteries Api */
    readonly masteries: MasteriesApi;
    /** /v2/materials Api */
    readonly materials: MaterialsApi;
    /** /v2/minis Api */
    readonly minis: MinisApi;
    /** /v2/mounts Api */
    readonly mounts: MountsApi;
    /** /v2/novelties Api */
    readonly novelties: NoveltiesApi;
    /** /v2/outfits Api */
    readonly outfits: OutfitsApi;
    /** /v2/pets Api */
    readonly pets: PetsApi;
    /** /v2/professions Api */
    readonly professions: ProfessionsApi;
    /** /v2/pvp Api */
    readonly pvp: PvPApi;
    /** /v2/quaggans Api */
    readonly quaggans: QuaggansApi;
    /** /v2/quests Api */
    readonly quests: QuestsApi;
    /** /v2/races Api */
    readonly races: RacesApi;
    /** /v2/raids Api */
    readonly raids: RaidsApi;
    /** /v2/recipes Api */
    readonly recipes: RecipesApi;
    /** /v2/skiffs Api */
    readonly skiffs: SkiffsApi;
    /** /v2/skills Api */
    readonly skills: SkillsApi;
    /** /v2/skins Api */
    readonly skins: SkinsApi;
    /** /v2/specializations Api */
    readonly specializations: SpecializationsApi;
    /** /v2/stories Api */
    readonly stories: StoriesApi;
    /** /v2/subtoken Api */
    readonly subtoken: SubtokenApi;
    /** /v2/titles Api */
    readonly titles: TitlesApi;
    /** /v2/tokeninfo Api */
    readonly tokenInfo: TokenInfoApi;
    /** /v2/traits Api */
    readonly traits: TraitsApi;
    /** /v2/wizardsvault Api */
    readonly wizardsVault: WizardsVaultApi;
    /** /v2/worldbosses Api */
    readonly worldBosses: WorldBossesApi;
    /** /v2/worlds Api */
    readonly worlds: WorldsApi;
    /** /v2/wvw Api */
    readonly wvw: WorldVsWorldApi;
}

/**
 * TSlog log level
 */
declare enum LogLevel {
    error = 5,
    warn = 4,
    info = 3,
    debug = 2
}
/**
 * Set logger level
 *
 * @param minLevel - Minimum logging level
 */
declare const setLogLevel: (minLevel: LogLevel) => void;
/**
 * Set whether the logger will display file paths
 *
 * @param displayFilePath - Filepath status
 */
declare const setPathLogging: (displayFilePath: boolean) => void;

export { ApiLanguage, type ApiParams, GW2Api, LogLevel, setLogLevel, setPathLogging };
